defmodule RivaAsh.Repo.Migrations.AddClientsAndReservations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:sections, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:name, :text, null: false)
      add(:description, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:business_id, :uuid, null: false)
    end

    create table(:reservations, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:reserved_from, :utc_datetime, null: false)
      add(:reserved_until, :utc_datetime, null: false)
      add(:status, :text, default: "pending")
      add(:notes, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:client_id, :uuid, null: false)
      add(:item_id, :uuid, null: false)
    end

    create table(:items, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:name, :text, null: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :section_id,
        references(:sections,
          column: :id,
          name: "items_section_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create(unique_index(:items, [:name], name: "items_unique_name_index"))

    create table(:clients, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:reservations) do
      modify(
        :client_id,
        references(:clients,
          column: :id,
          name: "reservations_client_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      modify(
        :item_id,
        references(:items,
          column: :id,
          name: "reservations_item_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    alter table(:clients) do
      add(:name, :text, null: false)
      add(:email, :citext)
      add(:phone, :text)
      add(:is_registered, :boolean, null: false, default: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:businesses, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:sections) do
      modify(
        :business_id,
        references(:businesses,
          column: :id,
          name: "sections_business_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create(
      unique_index(:sections, [:name, :business_id],
        name: "sections_unique_name_per_business_index"
      )
    )

    alter table(:businesses) do
      add(:name, :text, null: false)
      add(:description, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(unique_index(:businesses, [:name], name: "businesses_unique_name_index"))
  end

  def down do
    drop_if_exists(unique_index(:businesses, [:name], name: "businesses_unique_name_index"))

    alter table(:businesses) do
      remove(:updated_at)
      remove(:inserted_at)
      remove(:description)
      remove(:name)
    end

    drop_if_exists(
      unique_index(:sections, [:name, :business_id],
        name: "sections_unique_name_per_business_index"
      )
    )

    drop(constraint(:sections, "sections_business_id_fkey"))

    alter table(:sections) do
      modify(:business_id, :uuid)
    end

    drop(table(:businesses))

    alter table(:clients) do
      remove(:updated_at)
      remove(:inserted_at)
      remove(:is_registered)
      remove(:phone)
      remove(:email)
      remove(:name)
    end

    drop(constraint(:reservations, "reservations_client_id_fkey"))

    drop(constraint(:reservations, "reservations_item_id_fkey"))

    alter table(:reservations) do
      modify(:item_id, :uuid)
      modify(:client_id, :uuid)
    end

    drop(table(:clients))

    drop_if_exists(unique_index(:items, [:name], name: "items_unique_name_index"))

    drop(constraint(:items, "items_section_id_fkey"))

    drop(table(:items))

    drop(table(:reservations))

    drop(table(:sections))
  end
end
