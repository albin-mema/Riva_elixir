Checking 352 source files (this might take a while) ...

info: some checks were skipped because they're not compatible with
your version of Elixir (1.19.0-rc.0).

You can deactivate these checks by adding them to the `:checks`/`:disabled` list in your config:

  checks: %{
    disabled: [
      {Credo.Check.Warning.LazyLogging, []},	# requires Elixir < 1.7.0

      # ...
    ]
  }


  Software Design                                                                                                                                                      
┃ 
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth_helpers.ex:236:15 #(RivaAshWeb.Live.AuthHelpers.mount_business_scoped)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth_helpers.ex:228:14 #(RivaAshWeb.Live.AuthHelpers.mount_business_scoped)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth_helpers.ex:226:14 #(RivaAshWeb.Live.AuthHelpers.mount_business_scoped)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth_helpers.ex:225:14 #(RivaAshWeb.Live.AuthHelpers.mount_business_scoped)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth_helpers.ex:224:14 #(RivaAshWeb.Live.AuthHelpers.mount_business_scoped)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:388:9 #(RivaAsh.Resources.ItemPosition.check_position_overlap)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:383:10 #(RivaAsh.Resources.ItemPosition.check_position_overlap)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:382:10 #(RivaAsh.Resources.ItemPosition.check_position_overlap)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:370:18 #(RivaAsh.Resources.ItemPosition.check_position_overlap)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:322:8 #(RivaAsh.TestHelpers.create_section)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:303:19 #(RivaAsh.TestHelpers.create_section)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_helpers.ex:206:21 #(RivaAsh.PropertyHelpers.test_datetime_validation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_helpers.ex:205:21 #(RivaAsh.PropertyHelpers.test_datetime_validation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:336:8 #(RivaAsh.ComprehensiveArchivalTest.create_test_employee_permission!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:238:10 #(RivaAsh.ComprehensiveArchivalTest.test_archival_behavior)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:224:10 #(RivaAsh.ComprehensiveArchivalTest.test_archival_behavior)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/token_live.ex:353:10 #(RivaAshWeb.TokenLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/token_live.ex:351:9 #(RivaAshWeb.TokenLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/token_live.ex:349:9 #(RivaAshWeb.TokenLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/token_live.ex:274:11 #(RivaAshWeb.TokenLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/token_live.ex:256:7 #(RivaAshWeb.TokenLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/section_live.ex:370:14 #(RivaAshWeb.SectionLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/section_live.ex:340:10 #(RivaAshWeb.SectionLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/section_live.ex:338:9 #(RivaAshWeb.SectionLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/section_live.ex:336:9 #(RivaAshWeb.SectionLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/section_live.ex:260:11 #(RivaAshWeb.SectionLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/section_live.ex:230:11 #(RivaAshWeb.SectionLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/reservation_live.ex:393:14 #(RivaAshWeb.ReservationLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/reservation_live.ex:363:10 #(RivaAshWeb.ReservationLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/reservation_live.ex:361:9 #(RivaAshWeb.ReservationLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/reservation_live.ex:359:9 #(RivaAshWeb.ReservationLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/reservation_live.ex:281:11 #(RivaAshWeb.ReservationLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/reservation_live.ex:249:11 #(RivaAshWeb.ReservationLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:395:14 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:376:14 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:364:10 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:362:9 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:360:9 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:272:11 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:248:7 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/employee_live.ex:323:11 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/employee_live.ex:299:13 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/employee_live.ex:286:14 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/employee_live.ex:273:10 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/employee_live.ex:271:9 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/employee_live.ex:269:9 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/employee_live.ex:258:9 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/employee_live.ex:243:9 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/employee_live.ex:46:12 #(RivaAshWeb.EmployeeLive.mount)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/booking_calendar_live.ex:184:58 #(RivaAshWeb.BookingCalendarLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/booking_calendar_live.ex:183:63 #(RivaAshWeb.BookingCalendarLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth_helpers.ex:166:15 #(RivaAshWeb.Live.AuthHelpers.with_authentication)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth_helpers.ex:156:12 #(RivaAshWeb.Live.AuthHelpers.with_authentication)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth_helpers.ex:129:14 #(RivaAshWeb.Live.AuthHelpers.require_authentication)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth_helpers.ex:121:37 #(RivaAshWeb.Live.AuthHelpers.require_authentication)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth_helpers.ex:116:38 #(RivaAshWeb.Live.AuthHelpers.require_authentication)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth/register_live.ex:174:16 #(RivaAshWeb.Auth.RegisterLive.handle_event)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/auth/register_live.ex:20:7 #(RivaAshWeb.Auth.RegisterLive.mount)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/full_day_reservation.ex:19:35 #(RivaAsh.Validations.FullDayReservation.validate)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/full_day_reservation.ex:18:34 #(RivaAsh.Validations.FullDayReservation.validate)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/consecutive_days.ex:19:35 #(RivaAsh.Validations.ConsecutiveDays.validate)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/consecutive_days.ex:18:34 #(RivaAsh.Validations.ConsecutiveDays.validate)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:625:5 #(RivaAsh.Resources.Reservation.apply_date_range_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:621:5 #(RivaAsh.Resources.Reservation.apply_date_range_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:617:5 #(RivaAsh.Resources.Reservation.apply_date_range_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_hold.ex:325:9 #(RivaAsh.Resources.ItemHold.check_for_overlapping_holds)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_hold.ex:313:10 #(RivaAsh.Resources.ItemHold.check_for_overlapping_holds)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_hold.ex:309:18 #(RivaAsh.Resources.ItemHold.check_for_overlapping_holds)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/business.ex:447:8 #(RivaAsh.Resources.Business.apply_location_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/business.ex:446:8 #(RivaAsh.Resources.Business.apply_location_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/business.ex:441:5 #(RivaAsh.Resources.Business.apply_location_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/recurring_reservations.ex:524:13 #(RivaAsh.RecurringReservations.create_reservation_for_instance)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/recurring_reservations.ex:458:5 #(RivaAsh.RecurringReservations.check_item_availability)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/recurring_reservations.ex:446:5 #(RivaAsh.RecurringReservations.check_reservation_overlap)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/recurring_reservations.ex:248:12 #(RivaAsh.RecurringReservations.update_instances_status)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:445:8 #(RivaAsh.Queries.get_calendar_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:444:8 #(RivaAsh.Queries.get_calendar_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:443:8 #(RivaAsh.Queries.get_calendar_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:442:8 #(RivaAsh.Queries.get_calendar_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:409:9 #(RivaAsh.Queries.build_search_query)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:398:10 #(RivaAsh.Queries.build_search_query)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:397:10 #(RivaAsh.Queries.build_search_query)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:294:8 #(RivaAsh.Queries.get_employee_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:293:8 #(RivaAsh.Queries.get_employee_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:263:14 #(RivaAsh.Queries.find_conflicted_items)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:238:8 #(RivaAsh.Queries.get_business_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:237:8 #(RivaAsh.Queries.get_business_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:236:8 #(RivaAsh.Queries.get_business_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:235:8 #(RivaAsh.Queries.get_business_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:172:8 #(RivaAsh.Queries.get_reservations_for_period)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:171:8 #(RivaAsh.Queries.get_reservations_for_period)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:111:8 #(RivaAsh.Queries.get_upcoming_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:110:8 #(RivaAsh.Queries.get_upcoming_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:109:8 #(RivaAsh.Queries.get_upcoming_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:108:8 #(RivaAsh.Queries.get_upcoming_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:107:8 #(RivaAsh.Queries.get_upcoming_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:19:5 #(RivaAsh.Queries.check_item_availability)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/booking.ex:149:37 #(RivaAsh.Booking.maybe_register_client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/booking.ex:86:18 #(RivaAsh.Booking.handle_reservation_creation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/booking.ex:66:35 #(RivaAsh.Booking.handle_client_creation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/availability.ex:162:24 #(RivaAsh.Availability.all_dates_in_schedule?)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/availability.ex:149:10 #(RivaAsh.Availability.check_schedule_availability)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/availability.ex:148:7 #(RivaAsh.Availability.check_schedule_availability)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/availability.ex:76:24 #(RivaAsh.Availability.get_available_slots)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/mix/tasks/create_superadmin.ex:56:13 #(Mix.Tasks.CreateSuperadmin.create_superadmin)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:422:10 #(RivaAsh.TestHelpers.create_recurring_reservation!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:407:10 #(RivaAsh.TestHelpers.create_recurring_reservation!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:406:10 #(RivaAsh.TestHelpers.create_recurring_reservation!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:371:10 #(RivaAsh.TestHelpers.create_item!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:357:10 #(RivaAsh.TestHelpers.create_item!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:356:10 #(RivaAsh.TestHelpers.create_item!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:254:8 #(RivaAsh.TestHelpers.create_business)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:185:8 #(RivaAsh.TestHelpers.create_user)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:61:11 #(RivaAsh.TestHelpers.sandboxed)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/flow_generator.ex:281:7 #(RivaAsh.PropertyTesting.FlowGenerator.generate_resource_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/flow_generator.ex:273:7 #(RivaAsh.PropertyTesting.FlowGenerator.generate_resource_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/flow_generator.ex:265:7 #(RivaAsh.PropertyTesting.FlowGenerator.generate_resource_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/flow_generator.ex:257:7 #(RivaAsh.PropertyTesting.FlowGenerator.generate_resource_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:341:14 #(RivaAsh.PropertyTesting.DataManager.generate_employee_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:340:13 #(RivaAsh.PropertyTesting.DataManager.generate_employee_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:333:14 #(RivaAsh.PropertyTesting.DataManager.generate_item_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:332:13 #(RivaAsh.PropertyTesting.DataManager.generate_item_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:325:14 #(RivaAsh.PropertyTesting.DataManager.generate_client_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:324:13 #(RivaAsh.PropertyTesting.DataManager.generate_client_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:318:20 #(RivaAsh.PropertyTesting.DataManager.generate_business_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:317:13 #(RivaAsh.PropertyTesting.DataManager.generate_business_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:310:14 #(RivaAsh.PropertyTesting.DataManager.generate_user_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:309:13 #(RivaAsh.PropertyTesting.DataManager.generate_user_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:228:8 #(RivaAsh.PropertyTesting.DataManager.create_user)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_helpers.ex:153:18 #(RivaAsh.PropertyHelpers.create_scenario)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_helpers.ex:108:12 #(RivaAsh.PropertyHelpers.with_relationships)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/factory.ex:466:10 #(RivaAsh.Factory.build)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/factory.ex:456:10 #(RivaAsh.Factory.build)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:1013:25 #(RivaAshWeb.StorybookPropertyTest.render_test_component)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:996:25 #(RivaAshWeb.StorybookPropertyTest.render_test_component)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:978:25 #(RivaAshWeb.StorybookPropertyTest.render_test_component)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:961:25 #(RivaAshWeb.StorybookPropertyTest.render_test_component)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:820:31 #(RivaAshWeb.StorybookPropertyTest.measure_rendering_time)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:727:38 #(RivaAshWeb.StorybookPropertyTest.create_test_html)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:726:39 #(RivaAshWeb.StorybookPropertyTest.create_test_html)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:673:32 #(RivaAshWeb.StorybookPropertyTest.do_render_icon_component)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:588:32 #(RivaAshWeb.StorybookPropertyTest.do_render_text_component)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:489:32 #(RivaAshWeb.StorybookPropertyTest.do_render_input_component)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:431:23 #(RivaAshWeb.StorybookPropertyTest.render_button_with_fallback_text)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:363:32 #(RivaAshWeb.StorybookPropertyTest.do_render_button_component)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:269:10 #(RivaAshWeb.StorybookPropertyTest.TestShell.apply_component_func_with_error_handling)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:269:10 #(RivaAshWeb.StorybookPropertyTest.TestShell.apply_component_func_with_error_handling)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:205:23 #(RivaAshWeb.StorybookPropertyTest.TestShell.render_component_with_error_handling)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:205:23 #(RivaAshWeb.StorybookPropertyTest.TestShell.render_component_with_error_handling)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:204:23 #(RivaAshWeb.StorybookPropertyTest.TestShell.render_component_with_error_handling)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:204:23 #(RivaAshWeb.StorybookPropertyTest.TestShell.render_component_with_error_handling)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:203:24 #(RivaAshWeb.StorybookPropertyTest.TestShell.render_component_with_error_handling)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:203:24 #(RivaAshWeb.StorybookPropertyTest.TestShell.render_component_with_error_handling)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:202:25 #(RivaAshWeb.StorybookPropertyTest.TestShell.render_component_with_error_handling)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:202:25 #(RivaAshWeb.StorybookPropertyTest.TestShell.render_component_with_error_handling)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:172:14 #(RivaAshWeb.StorybookPropertyTest.TestCore.apply_component_func)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:172:14 #(RivaAshWeb.StorybookPropertyTest.TestCore.apply_component_func)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:150:23 #(RivaAshWeb.StorybookPropertyTest.TestCore.measure_performance)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:150:23 #(RivaAshWeb.StorybookPropertyTest.TestCore.measure_performance)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:149:23 #(RivaAshWeb.StorybookPropertyTest.TestCore.measure_performance)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:149:23 #(RivaAshWeb.StorybookPropertyTest.TestCore.measure_performance)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:148:24 #(RivaAshWeb.StorybookPropertyTest.TestCore.measure_performance)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:148:24 #(RivaAshWeb.StorybookPropertyTest.TestCore.measure_performance)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:147:25 #(RivaAshWeb.StorybookPropertyTest.TestCore.measure_performance)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:147:25 #(RivaAshWeb.StorybookPropertyTest.TestCore.measure_performance)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:313:8 #(RivaAsh.ComprehensiveArchivalTest.create_test_employee!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:275:8 #(RivaAsh.ComprehensiveArchivalTest.create_test_client!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:256:8 #(RivaAsh.ComprehensiveArchivalTest.create_test_business!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/plot_live.ex:289:10 #(RivaAshWeb.PlotLive.format_error_message)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/plot_live.ex:282:9 #(RivaAshWeb.PlotLive.delete_plot)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/plot_live.ex:278:9 #(RivaAshWeb.PlotLive.delete_plot)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/plot_live.ex:270:7 #(RivaAshWeb.PlotLive.get_current_user_from_session)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/plot_live.ex:267:14 #(RivaAshWeb.PlotLive.get_current_user_from_session)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/plot_live.ex:265:9 #(RivaAshWeb.PlotLive.get_current_user_from_session)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/dev_tools/test_data_generator_live.ex:531:22 #(RivaAshWeb.DevTools.TestDataGeneratorLive.quick_generate_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/dev_tools/test_data_generator_live.ex:512:24 #(RivaAshWeb.DevTools.TestDataGeneratorLive.quick_generate_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/live/dev_tools/test_data_generator_live.ex:493:15 #(RivaAshWeb.DevTools.TestDataGeneratorLive.quick_generate_data)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/json_api_router.ex:109:8 #(RivaAshWeb.JsonApiRouter.handle_json_api_error)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/json_api_router.ex:108:8 #(RivaAshWeb.JsonApiRouter.handle_json_api_error)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/json_api_router.ex:92:8 #(RivaAshWeb.JsonApiRouter.handle_json_api_error)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/json_api_router.ex:91:8 #(RivaAshWeb.JsonApiRouter.handle_json_api_error)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/controllers/auth_helpers.ex:149:13 #(RivaAshWeb.AuthHelpers.generate_auth_token)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/controllers/auth_helpers.ex:123:10 #(RivaAshWeb.AuthHelpers.verify_token)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/controllers/auth_controller.ex:151:10 #(RivaAshWeb.AuthController.verify_token)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/controllers/auth_controller.ex:147:5 #(RivaAshWeb.AuthController.generate_token)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/components/atoms/icon.ex:157:9 #(RivaAshWeb.Components.Atoms.Icon.render_icon_path)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/components/atoms/icon.ex:152:9 #(RivaAshWeb.Components.Atoms.Icon.render_icon_path)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/components/atoms/icon.ex:147:9 #(RivaAshWeb.Components.Atoms.Icon.render_icon_path)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/components/atoms/icon.ex:142:9 #(RivaAshWeb.Components.Atoms.Icon.render_icon_path)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/components/atoms/icon.ex:137:9 #(RivaAshWeb.Components.Atoms.Icon.render_icon_path)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/components/atoms/icon.ex:132:9 #(RivaAshWeb.Components.Atoms.Icon.render_icon_path)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/components/atoms/icon.ex:127:9 #(RivaAshWeb.Components.Atoms.Icon.render_icon_path)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/components/atoms/icon.ex:122:9 #(RivaAshWeb.Components.Atoms.Icon.render_icon_path)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash_web/components/atoms/icon.ex:117:9 #(RivaAshWeb.Components.Atoms.Icon.render_icon_path)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/reservation_time_slot.ex:17:35 #(RivaAsh.Validations.ReservationTimeSlot.validate)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/reservation_time_slot.ex:16:35 #(RivaAsh.Validations.ReservationTimeSlot.validate)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/reservation_time_slot.ex:15:34 #(RivaAsh.Validations.ReservationTimeSlot.validate)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/reservation_time_slot.ex:14:28 #(RivaAsh.Validations.ReservationTimeSlot.validate)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/full_day_reservation.ex:67:10 #(RivaAsh.Validations.FullDayReservation.get_required_attribute)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/consecutive_days.ex:65:10 #(RivaAsh.Validations.ConsecutiveDays.get_required_attribute)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1220:9 #(RivaAsh.Validations.check_single_active_base_pricing)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1207:10 #(RivaAsh.Validations.check_single_active_base_pricing)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1206:10 #(RivaAsh.Validations.check_single_active_base_pricing)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1205:10 #(RivaAsh.Validations.check_single_active_base_pricing)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1204:10 #(RivaAsh.Validations.check_single_active_base_pricing)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1198:18 #(RivaAsh.Validations.check_single_active_base_pricing)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1138:9 #(RivaAsh.Validations.check_pricing_date_overlap)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1133:10 #(RivaAsh.Validations.check_pricing_date_overlap)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1132:10 #(RivaAsh.Validations.check_pricing_date_overlap)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1131:10 #(RivaAsh.Validations.check_pricing_date_overlap)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1126:18 #(RivaAsh.Validations.check_pricing_date_overlap)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1051:13 #(RivaAsh.Validations.check_reservation_payment_business_match)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:1041:14 #(RivaAsh.Validations.check_reservation_payment_business_match)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:775:10 #(RivaAsh.Validations.validate_business_access)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:762:5 #(RivaAsh.Validations.sanitize_text)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:498:10 #(RivaAsh.Validations.check_active_holds)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:497:10 #(RivaAsh.Validations.check_active_holds)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:496:10 #(RivaAsh.Validations.check_active_holds)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:495:10 #(RivaAsh.Validations.check_active_holds)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:267:7 #(RivaAsh.Validations.build_overlap_query)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:253:10 #(RivaAsh.Validations.build_overlap_query)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:252:10 #(RivaAsh.Validations.build_overlap_query)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:251:10 #(RivaAsh.Validations.build_overlap_query)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:73:10 #(RivaAsh.Validations.get_optional_attribute)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations.ex:60:10 #(RivaAsh.Validations.get_required_attribute)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/section.ex:232:5 #(RivaAsh.Resources.Section.apply_active_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/section.ex:227:5 #(RivaAsh.Resources.Section.apply_business_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/section.ex:220:5 #(RivaAsh.Resources.Section.apply_plot_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:644:5 #(RivaAsh.Resources.Reservation.apply_provisional_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:637:5 #(RivaAsh.Resources.Reservation.apply_paid_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:610:5 #(RivaAsh.Resources.Reservation.apply_status_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:603:5 #(RivaAsh.Resources.Reservation.apply_business_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:596:5 #(RivaAsh.Resources.Reservation.apply_item_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:589:5 #(RivaAsh.Resources.Reservation.apply_client_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/pricing.ex:362:26 #(RivaAsh.Resources.Pricing.validate_cross_business_relationship)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/plot.ex:659:5 #(RivaAsh.Resources.Plot.apply_active_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/plot.ex:654:5 #(RivaAsh.Resources.Plot.apply_business_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/layout.ex:277:8 #(RivaAsh.Resources.Layout.apply_layout_type_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/layout.ex:269:8 #(RivaAsh.Resources.Layout.apply_active_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/layout.ex:263:8 #(RivaAsh.Resources.Layout.apply_business_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/layout.ex:262:8 #(RivaAsh.Resources.Layout.apply_business_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/layout.ex:254:8 #(RivaAsh.Resources.Layout.apply_plot_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_type.ex:271:5 #(RivaAsh.Resources.ItemType.apply_search_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_type.ex:262:5 #(RivaAsh.Resources.ItemType.apply_active_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_type.ex:257:5 #(RivaAsh.Resources.ItemType.apply_business_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:808:5 #(RivaAsh.Resources.Item.apply_availability_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:801:5 #(RivaAsh.Resources.Item.apply_active_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:796:5 #(RivaAsh.Resources.Item.apply_business_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:781:5 #(RivaAsh.Resources.Item.apply_search_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:625:5 #(RivaAsh.Resources.Client.apply_verification_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:618:5 #(RivaAsh.Resources.Client.apply_email_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:611:5 #(RivaAsh.Resources.Client.apply_registration_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:604:5 #(RivaAsh.Resources.Client.apply_business_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/business.ex:452:5 #(RivaAsh.Resources.Business.apply_active_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/business.ex:424:5 #(RivaAsh.Resources.Business.apply_search_filter)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/release.ex:238:5 #(RivaAsh.Release.perform_rollback)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/release.ex:238:5 #(RivaAsh.Release.perform_rollback)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/release.ex:224:10 #(RivaAsh.Release.get_last_version)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/release.ex:224:10 #(RivaAsh.Release.get_last_version)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/release.ex:210:12 #(RivaAsh.Release.check_migration_statuses)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/release.ex:210:12 #(RivaAsh.Release.check_migration_statuses)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/release.ex:200:12 #(RivaAsh.Release.rollback_last_migrations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/release.ex:200:12 #(RivaAsh.Release.rollback_last_migrations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/release.ex:190:12 #(RivaAsh.Release.run_migrations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/release.ex:190:12 #(RivaAsh.Release.run_migrations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/recurring_reservations.ex:563:8 #(RivaAsh.RecurringReservations.update_instance_with_reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/recurring_reservations.ex:547:8 #(RivaAsh.RecurringReservations.mark_instance_failed)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/recurring_reservations.ex:383:12 #(RivaAsh.RecurringReservations.create_instances_for_dates)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/recurring_reservations.ex:266:8 #(RivaAsh.RecurringReservations.update_recurring_reservation_status)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/recurring_reservations.ex:154:8 #(RivaAsh.RecurringReservations.create_recurring_reservation_record)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/reservation_reactor.ex:294:10 #(RivaAsh.Reactors.ReservationReactor.format_changeset_errors)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/business_setup_flow.ex:135:8 #(RivaAsh.Reactors.BusinessSetupFlow.format_changeset_errors)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/business_setup_flow.ex:113:10 #(RivaAsh.Reactors.BusinessSetupFlow.do_create_business)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:346:13 #(RivaAsh.Queries.get_reservation_count)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:345:13 #(RivaAsh.Queries.get_reservation_count)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:135:8 #(RivaAsh.Queries.get_client_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:134:8 #(RivaAsh.Queries.get_client_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:133:8 #(RivaAsh.Queries.get_client_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:61:8 #(RivaAsh.Queries.get_business_items)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:60:8 #(RivaAsh.Queries.get_business_items)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/queries.ex:59:8 #(RivaAsh.Queries.get_business_items)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/permissions.ex:263:8 #(RivaAsh.Permissions.find_employee_permission)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/permissions.ex:195:8 #(RivaAsh.Permissions.get_permission_by_name)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/permissions.ex:186:8 #(RivaAsh.Permissions.list_permissions_by_category)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/jobs/hold_cleanup_job.ex:294:8 #(RivaAsh.Jobs.HoldCleanupJob.find_expired_holds)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/date_time_helpers.ex:253:18 #(RivaAsh.DateTimeHelpers.split_datetime_range_by_day_type)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/date_time_helpers.ex:230:18 #(RivaAsh.DateTimeHelpers.spans_weekday_and_weekend?)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/date_time_helpers.ex:212:33 #(RivaAsh.DateTimeHelpers.previous_weekday)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/date_time_helpers.ex:197:33 #(RivaAsh.DateTimeHelpers.next_weekday)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/date_time_helpers.ex:159:5 #(RivaAsh.DateTimeHelpers.count_day_types)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/database_health.ex:79:12 #(RivaAsh.DatabaseHealth.execute_query_with_timeout)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/changes.ex:106:9 #(RivaAsh.Changes.apply_business_id_from_reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/changes.ex:93:10 #(RivaAsh.Changes.set_business_id_from_reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/changes.ex:80:9 #(RivaAsh.Changes.apply_business_id_from_employee)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/changes.ex:67:10 #(RivaAsh.Changes.set_business_id_from_employee)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/changes.ex:54:9 #(RivaAsh.Changes.apply_business_id_from_client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/changes.ex:41:10 #(RivaAsh.Changes.set_business_id_from_client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/changes.ex:28:9 #(RivaAsh.Changes.apply_business_id_from_item)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/changes.ex:15:10 #(RivaAsh.Changes.set_business_id_from_item)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/booking.ex:209:18 #(RivaAsh.Booking.get_existing_reservations)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/booking.ex:160:35 #(RivaAsh.Booking.confirm_reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/booking.ex:131:35 #(RivaAsh.Booking.get_reservation_with_client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/booking.ex:49:5 #(RivaAsh.Booking.create_booking)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/authorization.ex:254:10 #(RivaAsh.Authorization.user_owns_any_business?)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/authorization.ex:253:10 #(RivaAsh.Authorization.user_owns_any_business?)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/mix/tasks/create_superadmin.ex:97:16 #(Mix.Tasks.CreateSuperadmin.promote_existing_user)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:158:19 #(RivaAsh.PropertyTesting.DataManager.create_base_users)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:157:19 #(RivaAsh.PropertyTesting.DataManager.create_base_users)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/property_testing/data_manager.ex:149:15 #(RivaAsh.PropertyTesting.DataManager.create_base_users)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/data_case.ex:59:23 #(RivaAsh.DataCase.setup_sandbox)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/data_case.ex:58:9 #(RivaAsh.DataCase.setup_sandbox)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/data_case.ex:55:23 #(RivaAsh.DataCase.setup_sandbox)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/data_case.ex:54:15 #(RivaAsh.DataCase.setup_sandbox)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:908:13 #(RivaAshWeb.StorybookPropertyTest.build_conn)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:260:15 #(RivaAshWeb.StorybookPropertyTest.TestShell.build_conn)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/storybook_property_test.exs:260:15 #(RivaAshWeb.StorybookPropertyTest.TestShell.build_conn)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/pricing_resource_test.exs:9:8 #(RivaAsh.Resources.PricingResourceTest.create_item_type!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:362:8 #(RivaAsh.PaperTrailArchivalTest.create_test_client!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:343:8 #(RivaAsh.PaperTrailArchivalTest.create_test_business!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:327:8 #(RivaAsh.PaperTrailArchivalTest.get_versions_for_resource)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:326:8 #(RivaAsh.PaperTrailArchivalTest.get_versions_for_resource)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:293:8 #(RivaAsh.ComprehensiveArchivalTest.create_test_permission!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:163:12 #(RivaAsh.ComprehensiveArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:153:12 #(RivaAsh.ComprehensiveArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:137:19 #(RivaAsh.ComprehensiveArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:122:22 #(RivaAsh.ComprehensiveArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:113:10 #(RivaAsh.ComprehensiveArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:103:10 #(RivaAsh.ComprehensiveArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:83:17 #(RivaAsh.ComprehensiveArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/comprehensive_archival_test.exs:64:20 #(RivaAsh.ComprehensiveArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/reservation_time_slot.ex:72:10 #(RivaAsh.Validations.ReservationTimeSlot.get_optional_attribute)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/validations/reservation_time_slot.ex:64:10 #(RivaAsh.Validations.ReservationTimeSlot.get_required_attribute)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:527:15 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:524:15 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:521:15 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:518:15 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:515:15 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:212:17 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:209:15 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:200:17 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:197:15 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:187:17 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:186:17 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/reservation.ex:183:15 #(RivaAsh.Resources.Reservation)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/pricing.ex:341:15 #(RivaAsh.Resources.Pricing)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/pricing.ex:338:15 #(RivaAsh.Resources.Pricing)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/payment.ex:424:25 #(RivaAsh.Resources.Payment)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/payment.ex:423:23 #(RivaAsh.Resources.Payment)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/payment.ex:409:24 #(RivaAsh.Resources.Payment)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/payment.ex:394:25 #(RivaAsh.Resources.Payment)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/payment.ex:393:25 #(RivaAsh.Resources.Payment)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/payment.ex:379:24 #(RivaAsh.Resources.Payment)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/payment.ex:378:18 #(RivaAsh.Resources.Payment)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:285:18 #(RivaAsh.Resources.ItemPosition)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:284:17 #(RivaAsh.Resources.ItemPosition)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:283:23 #(RivaAsh.Resources.ItemPosition)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:282:20 #(RivaAsh.Resources.ItemPosition)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:281:21 #(RivaAsh.Resources.ItemPosition)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:264:18 #(RivaAsh.Resources.ItemPosition)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:263:17 #(RivaAsh.Resources.ItemPosition)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:262:23 #(RivaAsh.Resources.ItemPosition)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:261:20 #(RivaAsh.Resources.ItemPosition)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_position.ex:260:21 #(RivaAsh.Resources.ItemPosition)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_hold.ex:294:22 #(RivaAsh.Resources.ItemHold)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_hold.ex:276:21 #(RivaAsh.Resources.ItemHold)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_hold.ex:275:26 #(RivaAsh.Resources.ItemHold)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_hold.ex:274:25 #(RivaAsh.Resources.ItemHold)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item_hold.ex:273:19 #(RivaAsh.Resources.ItemHold)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:456:15 #(RivaAsh.Resources.Item)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:455:15 #(RivaAsh.Resources.Item)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:281:32 #(RivaAsh.Resources.Item)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:280:34 #(RivaAsh.Resources.Item)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:179:17 #(RivaAsh.Resources.Item)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:178:17 #(RivaAsh.Resources.Item)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:175:17 #(RivaAsh.Resources.Item)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:157:17 #(RivaAsh.Resources.Item)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/item.ex:156:17 #(RivaAsh.Resources.Item)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/employee_permission.ex:121:17 #(RivaAsh.Resources.EmployeePermission)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/employee_permission.ex:106:17 #(RivaAsh.Resources.EmployeePermission)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:463:14 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:462:10 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:440:14 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:439:10 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:320:11 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:317:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:312:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:311:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:292:17 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:291:17 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:279:11 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:277:14 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:276:14 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:272:17 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:264:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:245:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:244:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:243:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:228:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:205:17 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:204:17 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:198:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:197:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:170:14 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:169:14 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:165:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:153:16 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/client.ex:152:12 #(RivaAsh.Resources.Client)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/business.ex:199:11 #(RivaAsh.Resources.Business)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/business.ex:198:11 #(RivaAsh.Resources.Business)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/business.ex:196:32 #(RivaAsh.Resources.Business)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/availability_exception.ex:267:15 #(RivaAsh.Resources.AvailabilityException)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/resources/availability_exception.ex:264:15 #(RivaAsh.Resources.AvailabilityException)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/repo.ex:175:12 #(RivaAsh.Repo.get_postgres_version)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/repo.ex:137:12 #(RivaAsh.Repo.health_check)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/reservation_reactor.ex:273:15 #(RivaAsh.Reactors.ReservationReactor)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/example_reactor.ex:119:8 #(RivaAsh.Reactors.ExampleReactor.format_changeset_errors)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/example_reactor.ex:102:10 #(RivaAsh.Reactors.ExampleReactor.do_create_business)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/business_setup_flow.ex:345:16 #(RivaAsh.Reactors.BusinessSetupFlow)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/business_setup_flow.ex:292:16 #(RivaAsh.Reactors.BusinessSetupFlow)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/business_setup_flow.ex:237:16 #(RivaAsh.Reactors.BusinessSetupFlow)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/business_setup_flow.ex:201:12 #(RivaAsh.Reactors.BusinessSetupFlow)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/business_setup_flow.ex:162:12 #(RivaAsh.Reactors.BusinessSetupFlow)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/permissions.ex:176:8 #(RivaAsh.Permissions.list_assignable_permissions)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/jobs/hold_cleanup_job.ex:413:8 #(RivaAsh.Jobs.HoldCleanupJob.count_expired_holds)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/jobs/hold_cleanup_job.ex:404:8 #(RivaAsh.Jobs.HoldCleanupJob.count_active_holds)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/gdpr/retention_policy.ex:208:10 #(RivaAsh.GDPR.RetentionPolicy.cleanup_expired_consent_records)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/gdpr/retention_policy.ex:144:10 #(RivaAsh.GDPR.RetentionPolicy.cleanup_expired_users)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/gdpr/retention_policy.ex:143:10 #(RivaAsh.GDPR.RetentionPolicy.cleanup_expired_users)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/gdpr/consent_record.ex:83:12 #(RivaAsh.GDPR.ConsentRecord)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/gdpr/consent_record.ex:82:12 #(RivaAsh.GDPR.ConsentRecord)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/gdpr/consent_record.ex:81:12 #(RivaAsh.GDPR.ConsentRecord)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/gdpr/consent_record.ex:70:12 #(RivaAsh.GDPR.ConsentRecord)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/gdpr/consent_record.ex:69:12 #(RivaAsh.GDPR.ConsentRecord)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/database_health.ex:243:14 #(RivaAsh.DatabaseHealth.get_postgres_version)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/database_health.ex:212:19 #(RivaAsh.DatabaseHealth.check_postgres_version)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/database_health.ex:143:14 #(RivaAsh.DatabaseHealth.get_installed_extensions)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/database_health.ex:99:27 #(RivaAsh.DatabaseHealth.check_database_extensions)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/database_health.ex:63:12 #(RivaAsh.DatabaseHealth.check_database_connection)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/test_helpers.ex:46:11 #(RivaAsh.TestHelpers.__using__)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/feature_case.ex:36:19 #(RivaAshWeb.FeatureCase)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/feature_case.ex:35:11 #(RivaAshWeb.FeatureCase)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/endpoint_case.ex:38:10 #(RivaAshWeb.EndpointCase)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/endpoint_case.ex:37:10 #(RivaAshWeb.EndpointCase)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/endpoint_case.ex:36:10 #(RivaAshWeb.EndpointCase)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/endpoint_case.ex:27:7 #(RivaAshWeb.EndpointCase)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/endpoint_case.ex:24:11 #(RivaAshWeb.EndpointCase)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/conn_case.ex:35:9 #(RivaAshWeb.ConnCase)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/conn_case.ex:32:7 #(RivaAshWeb.ConnCase)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/support/conn_case.ex:29:11 #(RivaAshWeb.ConnCase)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/simple_browser_test.exs:46:21 #(SimpleBrowserTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/simple_browser_test.exs:46:21 #(SimpleBrowserTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/live/payment_live_test.exs:36:10 #(RivaAshWeb.PaymentLiveTest.create_reservation_with_outstanding_balance)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/live/payment_live_test.exs:25:10 #(RivaAshWeb.PaymentLiveTest.create_reservation_with_outstanding_balance)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/live/business_live_test.exs:46:12 #(RivaAshWeb.BusinessLiveTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/live/business_live_test.exs:42:15 #(RivaAshWeb.BusinessLiveTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/live/business_live_test.exs:21:12 #(RivaAshWeb.BusinessLiveTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/live/business_live_test.exs:17:15 #(RivaAshWeb.BusinessLiveTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/controllers/auth_controller_csrf_test.exs:58:14 #(RivaAshWeb.AuthControllerCsrfTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/controllers/auth_controller_csrf_test.exs:42:15 #(RivaAshWeb.AuthControllerCsrfTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/controllers/auth_controller_csrf_test.exs:40:12 #(RivaAshWeb.AuthControllerCsrfTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/controllers/auth_controller_csrf_test.exs:39:12 #(RivaAshWeb.AuthControllerCsrfTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/controllers/auth_controller_csrf_test.exs:38:12 #(RivaAshWeb.AuthControllerCsrfTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/controllers/auth_controller_csrf_test.exs:37:12 #(RivaAshWeb.AuthControllerCsrfTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/controllers/auth_controller_csrf_test.exs:36:12 #(RivaAshWeb.AuthControllerCsrfTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/components/ui/textarea_component_test.exs:58:12 #(RivaAshWeb.Components.UI.TextareaComponentTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/components/ui/textarea_component_test.exs:41:12 #(RivaAshWeb.Components.UI.TextareaComponentTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/components/ui/textarea_component_test.exs:23:12 #(RivaAshWeb.Components.UI.TextareaComponentTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/components/ui/input_test.exs:184:14 #(RivaAshWeb.Components.UI.InputTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/components/ui/input_test.exs:182:12 #(RivaAshWeb.Components.UI.InputTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/components/ui/input_test.exs:181:12 #(RivaAshWeb.Components.UI.InputTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/components/ui/input_test.exs:161:14 #(RivaAshWeb.Components.UI.InputTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/components/atoms/input_compatibility_test.exs:155:9 #(RivaAshWeb.Components.Atoms.InputCompatibilityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/components/atoms/input_compatibility_test.exs:70:14 #(RivaAshWeb.Components.Atoms.InputCompatibilityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/authentication_flow_test.exs:340:17 #(RivaAshWeb.AuthenticationFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/authentication_flow_test.exs:340:17 #(RivaAshWeb.AuthenticationFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/authentication_flow_test.exs:307:12 #(RivaAshWeb.AuthenticationFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/authentication_flow_test.exs:266:9 #(RivaAshWeb.AuthenticationFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/authentication_flow_test.exs:221:15 #(RivaAshWeb.AuthenticationFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/authentication_flow_test.exs:207:12 #(RivaAshWeb.AuthenticationFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/authentication_flow_test.exs:160:15 #(RivaAshWeb.AuthenticationFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/authentication_flow_test.exs:146:12 #(RivaAshWeb.AuthenticationFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/authentication_flow_test.exs:82:12 #(RivaAshWeb.AuthenticationFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/authentication_flow_test.exs:31:23 #(RivaAshWeb.AuthenticationFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash_web/authentication_flow_test.exs:31:23 #(RivaAshWeb.AuthenticationFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:335:22 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:334:21 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:333:22 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:314:12 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:300:12 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:290:12 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:276:19 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:264:19 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:236:12 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:223:19 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:204:19 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:194:19 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:184:19 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:165:19 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:155:19 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:138:19 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:124:12 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:116:12 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:67:10 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:57:10 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:44:10 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:32:10 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:23:10 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/security_test.exs:15:10 #(RivaAsh.SecurityTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/reservation_test.exs:217:32 #(RivaAsh.Resources.ReservationTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/reservation_test.exs:211:32 #(RivaAsh.Resources.ReservationTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/reservation_test.exs:143:14 #(RivaAsh.Resources.ReservationTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/reservation_test.exs:137:14 #(RivaAsh.Resources.ReservationTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/reservation_test.exs:127:14 #(RivaAsh.Resources.ReservationTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/reservation_test.exs:119:14 #(RivaAsh.Resources.ReservationTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:251:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:240:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:227:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:201:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:188:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:179:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:171:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:163:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:155:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:145:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:136:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:127:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:115:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:100:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:84:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:67:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:43:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:32:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:21:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/public_search_test.exs:11:12 #(RivaAsh.Resources.PublicSearchTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/pricing_resource_test.exs:46:17 #(RivaAsh.Resources.PricingResourceTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/pricing_resource_test.exs:24:10 #(RivaAsh.Resources.PricingResourceTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/payment_resource_test.exs:79:17 #(RivaAsh.Resources.PaymentResourceTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/payment_resource_test.exs:64:17 #(RivaAsh.Resources.PaymentResourceTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/payment_resource_test.exs:46:10 #(RivaAsh.Resources.PaymentResourceTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/payment_resource_test.exs:33:10 #(RivaAsh.Resources.PaymentResourceTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/payment_resource_test.exs:17:8 #(RivaAsh.Resources.PaymentResourceTest.create_reservation!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/client_test.exs:205:27 #(RivaAsh.Resources.ClientTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/client_test.exs:153:27 #(RivaAsh.Resources.ClientTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/client_test.exs:100:39 #(RivaAsh.Resources.ClientTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/resources/client_test.exs:91:31 #(RivaAsh.Resources.ClientTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/reactors/business_setup_flow_test.exs:157:12 #(RivaAsh.Reactors.BusinessSetupFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/reactors/business_setup_flow_test.exs:116:12 #(RivaAsh.Reactors.BusinessSetupFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/reactors/business_setup_flow_test.exs:12:12 #(RivaAsh.Reactors.BusinessSetupFlowTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/jobs/hold_cleanup_job_test.exs:81:14 #(RivaAsh.Jobs.HoldCleanupJobTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/riva_ash/jobs/hold_cleanup_job_test.exs:50:14 #(RivaAsh.Jobs.HoldCleanupJobTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:380:8 #(RivaAsh.PaperTrailArchivalTest.create_test_permission!)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:293:12 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:273:12 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:252:12 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:224:12 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:215:12 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:182:12 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:155:10 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:131:10 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:106:10 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:74:10 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:65:10 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/paper_trail_archival_test.exs:28:10 #(RivaAsh.PaperTrailArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:165:12 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:159:10 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:152:12 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:146:10 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:131:10 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:111:10 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:104:10 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:95:10 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:73:8 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:65:10 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:57:10 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:38:10 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       test/archival_test.exs:25:10 #(RivaAsh.ArchivalTest)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/example_reactor.ex:218:12 #(RivaAsh.Reactors.ExampleReactor)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/example_reactor.ex:173:12 #(RivaAsh.Reactors.ExampleReactor)
┃ [D] → Nested modules could be aliased at the top of the invoking module.
┃       lib/riva_ash/reactors/example_reactor.ex:137:12 #(RivaAsh.Reactors.ExampleReactor)
┃ [D] → Found a TODO tag in a comment: # TODO: run the reactor twice with same input; assert no duplicates and consistent result
┃       test/riva_ash/reactors/reservation_reactor_test.exs:28:7 #(RivaAsh.Reactors.ReservationReactorTest)
┃ [D] → Found a TODO tag in a comment: # TODO: force validation error or external failure and assert rollback behavior
┃       test/riva_ash/reactors/reservation_reactor_test.exs:20:7 #(RivaAsh.Reactors.ReservationReactorTest)
┃ [D] → Found a TODO tag in a comment: # TODO: set up input context via Factory, set Mox expectations for external calls
┃       test/riva_ash/reactors/reservation_reactor_test.exs:11:7 #(RivaAsh.Reactors.ReservationReactorTest)
┃ [D] → Found a TODO tag in a comment: # TODO: invoke dry-run mode and assert no changes while collecting candidate list
┃       test/riva_ash/gdpr/retention_policy_test.exs:27:7 #(RivaAsh.GDPR.RetentionPolicyTest)
┃ [D] → Found a TODO tag in a comment: # TODO: ensure dependent/child entities are cascaded or preserved per policy
┃       test/riva_ash/gdpr/retention_policy_test.exs:19:7 #(RivaAsh.GDPR.RetentionPolicyTest)
┃ [D] → Found a TODO tag in a comment: # TODO: run retention evaluation and assert only beyond-threshold affected
┃       test/riva_ash/gdpr/retention_policy_test.exs:11:7 #(RivaAsh.GDPR.RetentionPolicyTest)
┃ [D] → Found a TODO tag in a comment: # TODO: freeze time and insert records at t-threshold, t-threshold-1s, t-threshold+1s
┃       test/riva_ash/gdpr/retention_policy_test.exs:10:7 #(RivaAsh.GDPR.RetentionPolicyTest)
┃ [D] → Found a TODO tag in a comment: # TODO: perform deletion/anonymization and ensure foreign keys remain valid
┃       test/riva_ash/gdpr/data_subject_rights_test.exs:19:7 #(RivaAsh.GDPR.DataSubjectRightsTest)
┃ [D] → Found a TODO tag in a comment: # TODO: call export function and assert structure contains expected sections
┃       test/riva_ash/gdpr/data_subject_rights_test.exs:11:7 #(RivaAsh.GDPR.DataSubjectRightsTest)
┃ [D] → Found a TODO tag in a comment: # TODO: create a user with related records via Factory
┃       test/riva_ash/gdpr/data_subject_rights_test.exs:10:7 #(RivaAsh.GDPR.DataSubjectRightsTest)

  Code Readability                                                                                                                                                     
┃ 
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/booking.ex:147:7 #(RivaAsh.Booking.maybe_register_client)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/booking.ex:64:5 #(RivaAsh.Booking.handle_client_creation)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       test/riva_ash_web/storybook_property_test.exs:664:5 #(RivaAshWeb.StorybookPropertyTest.render_icon_component)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       test/riva_ash_web/storybook_property_test.exs:578:5 #(RivaAshWeb.StorybookPropertyTest.render_text_component)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       test/riva_ash_web/storybook_property_test.exs:480:5 #(RivaAshWeb.StorybookPropertyTest.render_input_component)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       test/riva_ash_web/storybook_property_test.exs:317:5 #(RivaAshWeb.StorybookPropertyTest.render_button_component)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash_web/controllers/booking_controller.ex:351:5 #(RivaAshWeb.BookingController.parse_datetime)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash_web/controllers/booking_controller.ex:262:5 #(RivaAshWeb.BookingController.parse_date)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash_web/controllers/auth_controller.ex:45:5 #(RivaAshWeb.AuthController.redirect_to_sign_in)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash_web/controllers/auth_controller.ex:32:5 #(RivaAshWeb.AuthController.redirect_to_dashboard)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash_web/components/layouts.ex:101:5 #(RivaAshWeb.Layouts.get_page_title)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash_web/components/interactive/recurrence_pattern.ex:340:5 #(RivaAshWeb.Components.Interactive.RecurrencePattern.get_pattern_field)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash_web/components/core_components.ex:88:5 #(RivaAshWeb.CoreComponents.build_flash_classes)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/resources/business.ex:388:5 #(RivaAsh.Resources.Business.formatted_address)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/permissions.ex:265:5 #(RivaAsh.Permissions.find_employee_permission)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/permissions.ex:197:5 #(RivaAsh.Permissions.get_permission_by_name)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/people/people_service.ex:387:5 #(RivaAsh.People.PeopleService.validate_employee_attrs)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/people/people_service.ex:371:5 #(RivaAsh.People.PeopleService.validate_client_attrs)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/payment/payment_service.ex:290:5 #(RivaAsh.Payment.PaymentService.validate_payment_attrs)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/database_health.ex:203:5 #(RivaAsh.DatabaseHealth.run_health_checks)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/booking.ex:277:5 #(RivaAsh.Booking.create_reservation)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/booking.ex:259:5 #(RivaAsh.Booking.find_or_create_client)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/booking.ex:231:5 #(RivaAsh.Booking.find_or_create_client)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/booking.ex:203:5 #(RivaAsh.Booking.get_existing_reservations)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/booking.ex:158:5 #(RivaAsh.Booking.confirm_reservation)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/booking.ex:129:5 #(RivaAsh.Booking.get_reservation_with_client)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/authorization.ex:258:5 #(RivaAsh.Authorization.user_owns_any_business?)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       lib/riva_ash/permissions/constants.ex:405:5 #(RivaAsh.Permissions.Constants.all_permissions)
┃ [R] → Space missing after comma.
┃       lib/riva_ash/database_health.ex:192:39 #(RivaAsh.DatabaseHealth)
┃ [R] → Use a variable or create a new function instead of piping to a block.
┃       config/runtime.exs:42:9 #()
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/position/position_service.ex:263:5 #(RivaAsh.Position.PositionService.update_position_status)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/permission/permission_service.ex:451:5 #(RivaAsh.Permission.PermissionService.has_permission?)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/permission/permission_service.ex:182:5 #(RivaAsh.Permission.PermissionService.update_permission)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/permission/permission_service.ex:91:5 #(RivaAsh.Permission.PermissionService.save_employee_permissions)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/people/people_service.ex:322:5 #(RivaAsh.People.PeopleService.get_person)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/people/people_service.ex:276:5 #(RivaAsh.People.PeopleService.delete_person)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/people/people_service.ex:245:5 #(RivaAsh.People.PeopleService.update_employee)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/people/people_service.ex:214:5 #(RivaAsh.People.PeopleService.update_client)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/payment/payment_service.ex:92:5 #(RivaAsh.Payment.PaymentService.update_payment)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/layout/layout_service.ex:92:5 #(RivaAsh.Layout.LayoutService.update_layout)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/item_type/type_service.ex:92:5 #(RivaAsh.ItemType.TypeService.update_type)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/hold/hold_service.ex:126:5 #(RivaAsh.Hold.HoldService.check_item_availability)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:815:5 #(RivaAshWeb.StorybookPropertyTest.measure_rendering_time)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:790:5 #(RivaAshWeb.StorybookPropertyTest.cleanup_test_files)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:770:5 #(RivaAshWeb.StorybookPropertyTest.run_browser_visual_test)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:759:5 #(RivaAshWeb.StorybookPropertyTest.setup_visual_test)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:723:5 #(RivaAshWeb.StorybookPropertyTest.create_test_html)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:672:5 #(RivaAshWeb.StorybookPropertyTest.do_render_icon_component)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:586:5 #(RivaAshWeb.StorybookPropertyTest.do_render_text_component)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:488:5 #(RivaAshWeb.StorybookPropertyTest.do_render_input_component)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:361:5 #(RivaAshWeb.StorybookPropertyTest.do_render_button_component)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:249:7 #(RivaAshWeb.StorybookPropertyTest.TestShell.cleanup_test_environment)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:229:7 #(RivaAshWeb.StorybookPropertyTest.TestShell.execute_browser_visual_test)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:218:7 #(RivaAshWeb.StorybookPropertyTest.TestShell.setup_visual_environment)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:199:7 #(RivaAshWeb.StorybookPropertyTest.TestShell.render_component_with_error_handling)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:144:7 #(RivaAshWeb.StorybookPropertyTest.TestCore.measure_performance)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/route_navigation_property_test.exs:651:5 #(RivaAshWeb.RouteNavigationPropertyTest.create_item_safe)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/live/token_live.ex:624:5 #(RivaAshWeb.TokenLive.load_users)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/live/token_live.ex:613:5 #(RivaAshWeb.TokenLive.load_tokens_simple)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/live/token_live.ex:417:5 #(RivaAshWeb.TokenLive.list_tokens_with_flop)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:651:5 #(RivaAshWeb.RecurringReservationInstanceLive.load_reservations)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:637:5 #(RivaAshWeb.RecurringReservationInstanceLive.load_recurring_reservations)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:620:5 #(RivaAshWeb.RecurringReservationInstanceLive.load_instances_simple)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/live/plot_live.ex:488:5 #(RivaAshWeb.PlotLive.load_plots_simple)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/live/plot_live.ex:275:5 #(RivaAshWeb.PlotLive.delete_plot)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/live/dev_tools/test_data_generator_live.ex:404:7 #(RivaAshWeb.DevTools.TestDataGeneratorLive.count_records)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/layout_hook.ex:88:5 #(RivaAshWeb.LayoutHook.module_module_info)
┃ [R] ↘ There should be no trailing white-space at the end of a line.
┃       lib/riva_ash_web/components/ui/text.ex:41:1 #(RivaAshWeb.Components.UI.Text.render_text_component)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/navigation/search_global.ex:171 #(RivaAshWeb.Components.Navigation.SearchGlobal.humanize_type)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/navigation/notification_center.ex:169 #(RivaAshWeb.Components.Navigation.NotificationCenter.format_time_ago)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/navigation/breadcrumb_trail.ex:101 #(RivaAshWeb.Components.Navigation.BreadcrumbTrail.build_separator_class)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/tooltip.ex:104 #(RivaAshWeb.Components.Atoms.Tooltip.render_tooltip)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/spinner.ex:174 #(RivaAshWeb.Components.Atoms.Spinner.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/progress.ex:236 #(RivaAshWeb.Components.Atoms.Progress.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/link.ex:200 #(RivaAshWeb.Components.Atoms.Link.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/label.ex:163 #(RivaAshWeb.Components.Atoms.Label.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/input.ex:198 #(RivaAshWeb.Components.Atoms.Input.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/image.ex:208 #(RivaAshWeb.Components.Atoms.Image.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/file_upload.ex:252 #(RivaAshWeb.Components.Atoms.FileUpload.render_file_preview)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/divider.ex:166 #(RivaAshWeb.Components.Atoms.Divider.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/container.ex:139 #(RivaAshWeb.Components.Atoms.Container.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/card.ex:209 #(RivaAshWeb.Components.Atoms.Card.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/button.ex:165 #(RivaAshWeb.Components.Atoms.Button.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/badge.ex:137 #(RivaAshWeb.Components.Atoms.Badge.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/avatar.ex:208 #(RivaAshWeb.Components.Atoms.Avatar.render_error)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash_web/components/atoms/alert.ex:165 #(RivaAshWeb.Components.Atoms.Alert.render_error)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/schedule/schedule_service.ex:50:5 #(RivaAsh.Schedule.ScheduleService.get_schedule)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/schedule/schedule_service.ex:21:5 #(RivaAsh.Schedule.ScheduleService.get_user_schedules)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash/resources/item.ex:825 #(RivaAsh.Resources.Item.apply_availability_filter)
┃ [R] ↘ There should be no trailing white-space at the end of a line.
┃       lib/riva_ash/resources/employee_permission.ex:286:1 #(RivaAsh.Resources.EmployeePermission.format_active_assignment)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash/resources/business.ex:454 #(RivaAsh.Resources.Business.apply_active_filter)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/position/position_service.ex:50:5 #(RivaAsh.Position.PositionService.get_position)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/position/position_service.ex:21:5 #(RivaAsh.Position.PositionService.get_user_positions)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash/permissions/constants.ex:1034 #(RivaAsh.Permissions.Constants.permission_requires_audit?)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/permission/permission_service.ex:478:5 #(RivaAsh.Permission.PermissionService.get_employee_permissions_list)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/permission/permission_service.ex:398:5 #(RivaAsh.Permission.PermissionService.get_permission_stats)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/permission/permission_service.ex:311:5 #(RivaAsh.Permission.PermissionService.get_permission)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/permission/permission_service.ex:262:5 #(RivaAsh.Permission.PermissionService.delete_employee)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/permission/permission_service.ex:213:5 #(RivaAsh.Permission.PermissionService.delete_permission)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/permission/permission_service.ex:155:5 #(RivaAsh.Permission.PermissionService.create_permission)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/permission/permission_service.ex:50:5 #(RivaAsh.Permission.PermissionService.get_employee_permissions)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/permission/permission_service.ex:19:5 #(RivaAsh.Permission.PermissionService.get_user_permissions_data)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/people/people_service.ex:187:5 #(RivaAsh.People.PeopleService.create_employee)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/people/people_service.ex:160:5 #(RivaAsh.People.PeopleService.create_client)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/payment/payment_service.ex:261:5 #(RivaAsh.Payment.PaymentService.get_payment)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/payment/payment_service.ex:226:5 #(RivaAsh.Payment.PaymentService.refund_payment)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/payment/payment_service.ex:191:5 #(RivaAsh.Payment.PaymentService.cancel_payment)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/payment/payment_service.ex:154:5 #(RivaAsh.Payment.PaymentService.process_payment)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/payment/payment_service.ex:123:5 #(RivaAsh.Payment.PaymentService.delete_payment)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/payment/payment_service.ex:65:5 #(RivaAsh.Payment.PaymentService.create_payment)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/mermaid.ex:46:5 #(RivaAsh.Mermaid.resource_to_mermaid)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/mermaid.ex:15:5 #(RivaAsh.Mermaid.generate_erd)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/layout/layout_service.ex:216:5 #(RivaAsh.Layout.LayoutService.get_layout)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/layout/layout_service.ex:185:5 #(RivaAsh.Layout.LayoutService.deactivate_layout)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/layout/layout_service.ex:154:5 #(RivaAsh.Layout.LayoutService.activate_layout)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/layout/layout_service.ex:123:5 #(RivaAsh.Layout.LayoutService.delete_layout)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/layout/layout_service.ex:65:5 #(RivaAsh.Layout.LayoutService.create_layout)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash/item_type/type_service.ex:355 #(RivaAsh.ItemType.TypeService.get_type_stats)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/item_type/type_service.ex:216:5 #(RivaAsh.ItemType.TypeService.get_type)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/item_type/type_service.ex:185:5 #(RivaAsh.ItemType.TypeService.deactivate_type)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/item_type/type_service.ex:154:5 #(RivaAsh.ItemType.TypeService.activate_type)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/item_type/type_service.ex:123:5 #(RivaAsh.ItemType.TypeService.delete_type)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/item_type/type_service.ex:65:5 #(RivaAsh.ItemType.TypeService.create_type)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/item/item_service.ex:45:5 #(RivaAsh.Item.ItemService.get_item)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/hold/hold_service.ex:159:5 #(RivaAsh.Hold.HoldService.get_hold_for_user)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/hold/hold_service.ex:20:5 #(RivaAsh.Hold.HoldService.get_user_holds)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/gdpr/retention_policy.ex:265:5 #(RivaAsh.GDPR.RetentionPolicy.hard_delete_user)
┃ [R] ↘ There should be no more than 1 consecutive blank lines.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:90 #(RivaAsh.GDPR.DataSubjectRights.request_data_deletion)
┃ [R] ↘ There should be no more than 1 consecutive blank lines.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:55 #(RivaAsh.GDPR.DataSubjectRights.export_personal_data)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/error_helpers.ex:112:5 #(RivaAsh.ErrorHelpers.with_error_handling)
┃ [R] ↘ There should be no more than 1 consecutive blank lines.
┃       lib/riva_ash/error_helpers.ex:80 #(RivaAsh.ErrorHelpers.format_error)
┃ [R] ↘ There should be no more than 1 consecutive blank lines.
┃       lib/riva_ash/date_time_helpers.ex:238 #(RivaAsh.DateTimeHelpers.spans_weekday_and_weekend?)
┃ [R] ↘ There should be no more than 1 consecutive blank lines.
┃       lib/riva_ash/date_time_helpers.ex:35 #(RivaAsh.DateTimeHelpers.weekend?)
┃ [R] ↘ There should be no more than 1 consecutive blank lines.
┃       lib/riva_ash/database_health.ex:209 #(RivaAsh.DatabaseHealth.run_health_checks)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/database_health.ex:78:5 #(RivaAsh.DatabaseHealth.execute_query_with_timeout)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/authorization.ex:227:5 #(RivaAsh.Authorization.normalize_permission_name)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/mix/tasks/erd.ex:60:5 #(Mix.Tasks.Erd.generate_diagram)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/mix/tasks/erd.ex:30:5 #(Mix.Tasks.Erd.run)
┃ [R] ↘ The alias `RivaAsh.PropertyTesting.StateMachine` is not alphabetically ordered among its group.
┃       test/support/property_testing/flow_generator.ex:12:34 #(RivaAsh.PropertyTesting.FlowGenerator)
┃ [R] ↘ The alias `RivaAsh.Resources.Item` is not alphabetically ordered among its group.
┃       test/support/property_testing/data_manager.ex:12:46 #(RivaAsh.PropertyTesting.DataManager)
┃ [R] ↘ The alias `RivaAsh.Factory` is not alphabetically ordered among its group.
┃       test/support/property_testing/data_manager.ex:10:9 #(RivaAsh.PropertyTesting.DataManager)
┃ [R] ↘ The alias `RivaAsh.Resources.Business` is not alphabetically ordered among its group.
┃       test/support/factory.ex:27 #(RivaAsh.Factory)
┃ [R] ↘ Do not use parentheses when defining a function which has no arguments.
┃       test/riva_ash_web/storybook_property_test.exs:954:9 #(RivaAshWeb.StorybookPropertyTest)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:907:5 #(RivaAshWeb.StorybookPropertyTest.build_conn)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/riva_ash_web/storybook_property_test.exs:259:7 #(RivaAshWeb.StorybookPropertyTest.TestShell.build_conn)
┃ [R] ↘ The alias `RivaAsh.ErrorHelpers` is not alphabetically ordered among its group.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:13:9 #(RivaAshWeb.NoDatabaseIntegrationTest)
┃ [R] ↘ The alias `RivaAsh.Resources.Business` is not alphabetically ordered among its group.
┃       test/comprehensive_archival_test.exs:13 #(RivaAsh.ComprehensiveArchivalTest)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/telemetry.ex:265:5 #(RivaAshWeb.Telemetry.count_reservations)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash_web/telemetry.ex:253:5 #(RivaAshWeb.Telemetry.count_businesses)
┃ [R] ↘ The alias `RivaAsh.Accounts.User` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/token_live.ex:17:9 #(RivaAshWeb.TokenLive)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/system_settings_live.ex:11:9 #(RivaAshWeb.SystemSettingsLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Section` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/section_live.ex:17:9 #(RivaAshWeb.SectionLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Reservation` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/reservation_live.ex:16:9 #(RivaAshWeb.ReservationLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Business` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/reservation_center_live.ex:10 #(RivaAshWeb.ReservationCenterLive)
┃ [R] ↘ The alias `RivaAsh.Resources.RecurringReservation` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/recurring_reservation_live.ex:12:9 #(RivaAshWeb.RecurringReservationLive)
┃ [R] ↘ The alias `RivaAsh.Resources.RecurringReservationInstance` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:16:9 #(RivaAshWeb.RecurringReservationInstanceLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Pricing` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/pricing_live.ex:12:9 #(RivaAshWeb.PricingLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Plot` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/plot_live.ex:16:9 #(RivaAshWeb.PlotLive)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/permission_live.ex:13:9 #(RivaAshWeb.PermissionLive)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/people_management_live.ex:8:9 #(RivaAshWeb.PeopleManagementLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Payment` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/payment_live.ex:11:9 #(RivaAshWeb.PaymentLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Layout` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/layout_live.ex:14:9 #(RivaAshWeb.LayoutLive)
┃ [R] ↘ The alias `RivaAsh.Resources.ItemType` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/item_type_live.ex:11:9 #(RivaAshWeb.ItemTypeLive)
┃ [R] ↘ The alias `RivaAsh.Schedule.ScheduleService` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/item_schedule_live.ex:12:9 #(RivaAshWeb.ItemScheduleLive)
┃ [R] ↘ The alias `RivaAsh.Resources.ItemPosition` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/item_position_live.ex:11:9 #(RivaAshWeb.ItemPositionLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Item` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/item_live.ex:14:9 #(RivaAshWeb.ItemLive)
┃ [R] ↘ The alias `RivaAsh.Resources.ItemHold` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/item_hold_live.ex:11:9 #(RivaAshWeb.ItemHoldLive)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/inventory_management_live.ex:10:9 #(RivaAshWeb.InventoryManagementLive)
┃ [R] ↘ The alias `RivaAsh.Financial` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/financial_operations_live.ex:19:9 #(RivaAshWeb.FinancialOperationsLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Employee` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/employee_live.ex:29:9 #(RivaAshWeb.EmployeeLive)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/dev_tools/test_data_generator_live.ex:19:11 #(RivaAshWeb.DevTools.TestDataGeneratorLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Client` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/client_live.ex:23:9 #(RivaAshWeb.ClientLive)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/business_setup_live.ex:19:9 #(RivaAshWeb.BusinessSetupLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Business` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/business_live.ex:23:9 #(RivaAshWeb.BusinessLive)
┃ [R] ↘ The alias `RivaAsh.Resources.AvailabilityException` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/availability_exception_live.ex:20:9 #(RivaAshWeb.AvailabilityExceptionLive)
┃ [R] ↘ The alias `RivaAsh.Resources.Business` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/auth_helpers.ex:15:9 #(RivaAshWeb.Live.AuthHelpers)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/controllers/booking_controller.ex:18:9 #(RivaAshWeb.BookingController)
┃ [R] ↘ The alias `RivaAsh.ErrorHelpers` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/controllers/auth_helpers.ex:14:9 #(RivaAshWeb.AuthHelpers)
┃ [R] ↘ The alias `RivaAshWeb.AuthHelpers` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/controllers/auth_controller.ex:14:9 #(RivaAshWeb.AuthController)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/organisms/page_header.ex:10:42 #(RivaAshWeb.Components.Organisms.PageHeader)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/organisms/page_header.ex:9:41 #(RivaAshWeb.Components.Organisms.PageHeader)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/organisms/page_header.ex:8:40 #(RivaAshWeb.Components.Organisms.PageHeader)
┃ [R] ↘ The alias `RivaAshWeb.Components.UI.Text` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/components/organisms/page_header.ex:7:9 #(RivaAshWeb.Components.Organisms.PageHeader)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/organisms/page_header.ex:7:40 #(RivaAshWeb.Components.Organisms.PageHeader)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/organisms/business_form.ex:8:40 #(RivaAshWeb.Components.Organisms.BusinessForm)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/organisms/business_form.ex:7:42 #(RivaAshWeb.Components.Organisms.BusinessForm)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:10:40 #(RivaAshWeb.Components.Molecules.StatusIndicator)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:9:41 #(RivaAshWeb.Components.Molecules.StatusIndicator)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/search_bar.ex:46:40 #(RivaAshWeb.Components.Molecules.SearchBar)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/search_bar.ex:45:42 #(RivaAshWeb.Components.Molecules.SearchBar)
┃ [R] ↘ The alias `RivaAshWeb.Components.UI.Input` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/components/molecules/search_bar.ex:44:9 #(RivaAshWeb.Components.Molecules.SearchBar)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/search_bar.ex:44:41 #(RivaAshWeb.Components.Molecules.SearchBar)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/pagination.ex:47:40 #(RivaAshWeb.Components.Molecules.Pagination)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/pagination.ex:46:42 #(RivaAshWeb.Components.Molecules.Pagination)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/pagination.ex:45:40 #(RivaAshWeb.Components.Molecules.Pagination)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/pagination.ex:44:42 #(RivaAshWeb.Components.Molecules.Pagination)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/form_field.ex:50:44 #(RivaAshWeb.Components.Molecules.FormField)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/form_field.ex:49:42 #(RivaAshWeb.Components.Molecules.FormField)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/form_field.ex:48:44 #(RivaAshWeb.Components.Molecules.FormField)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/form_field.ex:47:41 #(RivaAshWeb.Components.Molecules.FormField)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/form_field.ex:46:40 #(RivaAshWeb.Components.Molecules.FormField)
┃ [R] ↘ The alias `RivaAshWeb.Components.UI.Text` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/components/molecules/form_field.ex:45:9 #(RivaAshWeb.Components.Molecules.FormField)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/form_field.ex:45:40 #(RivaAshWeb.Components.Molecules.FormField)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/filter_panel.ex:46:40 #(RivaAshWeb.Components.Molecules.FilterPanel)
┃ [R] ↘ The alias `RivaAshWeb.Components.UI.Text` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/components/molecules/filter_panel.ex:45:9 #(RivaAshWeb.Components.Molecules.FilterPanel)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/filter_panel.ex:45:40 #(RivaAshWeb.Components.Molecules.FilterPanel)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/filter_panel.ex:44:42 #(RivaAshWeb.Components.Molecules.FilterPanel)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:45:40 #(RivaAshWeb.Components.Molecules.EmptyState)
┃ [R] ↘ The alias `RivaAshWeb.Components.UI.Text` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:44:9 #(RivaAshWeb.Components.Molecules.EmptyState)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:44:40 #(RivaAshWeb.Components.Molecules.EmptyState)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/card.ex:48:40 #(RivaAshWeb.Components.Molecules.Card)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/card.ex:47:40 #(RivaAshWeb.Components.Molecules.Card)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/action_menu.ex:46:40 #(RivaAshWeb.Components.Molecules.ActionMenu)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/molecules/action_menu.ex:45:42 #(RivaAshWeb.Components.Molecules.ActionMenu)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/text_input.ex:9:41 #(RivaAshWeb.Components.Atoms.TextInput)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/select.ex:9:42 #(RivaAshWeb.Components.Atoms.Select)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/input.ex:11:41 #(RivaAshWeb.Components.Atoms.Input)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/checkbox.ex:9:44 #(RivaAshWeb.Components.Atoms.Checkbox)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/button.ex:11:42 #(RivaAshWeb.Components.Atoms.Button)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/badge.ex:13:41 #(RivaAshWeb.Components.Atoms.Badge)
┃ [R] ↘ Line is too long (max is 120, was 122).
┃       lib/riva_ash/validations.ex:1123:121 #(RivaAsh.Validations)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash/search/search_service.ex:7:9 #(RivaAsh.Search.SearchService)
┃ [R] ↘ The alias `RivaAsh.Resources.ItemSchedule` is not alphabetically ordered among its group.
┃       lib/riva_ash/schedule/schedule_service.ex:7:9 #(RivaAsh.Schedule.ScheduleService)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash/resources/permission.ex:479 #(RivaAsh.Resources.Permission)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash/resources/client.ex:647 #(RivaAsh.Resources.Client)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/repo.ex:174:5 #(RivaAsh.Repo.get_postgres_version)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/repo.ex:136:5 #(RivaAsh.Repo.health_check)
┃ [R] ↘ There should be a final \n at the end of each file.
┃       lib/riva_ash/release.ex:336 #(RivaAsh.Release.load_app)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash/recurring_reservations.ex:14:9 #(RivaAsh.RecurringReservations)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash/reactors/reservation_reactor.ex:20:9 #(RivaAsh.Reactors.ReservationReactor)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash/reactors/business_setup_flow.ex:20:9 #(RivaAsh.Reactors.BusinessSetupFlow)
┃ [R] ↘ The alias `RivaAsh.Resources.ItemPosition` is not alphabetically ordered among its group.
┃       lib/riva_ash/position/position_service.ex:7:9 #(RivaAsh.Position.PositionService)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash/permissions/constants.ex:16:21 #(RivaAsh.Permissions.Constants)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash/permissions.ex:13:9 #(RivaAsh.Permissions)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash/permission/permission_service.ex:12:9 #(RivaAsh.Permission.PermissionService)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash/people/people_service.ex:11:9 #(RivaAsh.People.PeopleService)
┃ [R] ↘ The alias `RivaAsh.Resources.Payment` is not alphabetically ordered among its group.
┃       lib/riva_ash/payment/payment_service.ex:11:9 #(RivaAsh.Payment.PaymentService)
┃ [R] ↘ The alias `RivaAsh.Resources.Layout` is not alphabetically ordered among its group.
┃       lib/riva_ash/layout/layout_service.ex:11:9 #(RivaAsh.Layout.LayoutService)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/jobs/hold_cleanup_job.ex:425:5 #(RivaAsh.Jobs.HoldCleanupJob.get_job_state)
┃ [R] ↘ The alias `RivaAsh.Resources.ItemHold` is not alphabetically ordered among its group.
┃       lib/riva_ash/jobs/hold_cleanup_job.ex:22:9 #(RivaAsh.Jobs.HoldCleanupJob)
┃ [R] ↘ The alias `RivaAsh.Resources.ItemType` is not alphabetically ordered among its group.
┃       lib/riva_ash/item_type/type_service.ex:11:9 #(RivaAsh.ItemType.TypeService)
┃ [R] ↘ The alias `RivaAsh.Resources.Item` is not alphabetically ordered among its group.
┃       lib/riva_ash/item/item_service.ex:7:28 #(RivaAsh.Item.ItemService)
┃ [R] ↘ There should be no more than 1 consecutive blank lines.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:376 #(RivaAsh.GDPR.DataSubjectRights)
┃ [R] ↘ There should be no more than 1 consecutive blank lines.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:375 #(RivaAsh.GDPR.DataSubjectRights)
┃ [R] ↘ There should be no more than 1 consecutive blank lines.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:374 #(RivaAsh.GDPR.DataSubjectRights)
┃ [R] ↘ The alias `RivaAsh.Resources.Business` is not alphabetically ordered among its group.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:17:9 #(RivaAsh.GDPR.DataSubjectRights)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/database_health.ex:62:5 #(RivaAsh.DatabaseHealth.check_database_connection)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash/booking.ex:13:9 #(RivaAsh.Booking)
┃ [R] ↘ The alias `RivaAsh.Resources.ItemSchedule` is not alphabetically ordered among its group.
┃       lib/riva_ash/availability.ex:19:9 #(RivaAsh.Availability)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/application.ex:149:5 #(RivaAsh.Application.safe_migrate)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash/application.ex:123:5 #(RivaAsh.Application.configure_ash_sat_solver)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/riva_ash.ex:50:5 #(RivaAsh.configure_default_settings)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       lib/mix/tasks/routes.check.ex:58:5 #(Mix.Tasks.Routes.Check.get_all_routes)
┃ [R] ↘ The alias `RivaAsh.Accounts.User` is not alphabetically ordered among its group.
┃       lib/mix/tasks/create_superadmin.ex:18:9 #(Mix.Tasks.CreateSuperadmin)
┃ [R] ↘ The alias `RivaAsh.Resources.Item` is not alphabetically ordered among its group.
┃       test/support/test_helpers.ex:30:13 #(RivaAsh.TestHelpers.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       test/support/conn_case.ex:21:40 #(RivaAshWeb.ConnCase)
┃ [R] ↘ There should be no trailing white-space at the end of a line.
┃       test/support/component_case.ex:7:1 #(RivaAshWeb.ComponentCase)
┃ [R] ↘ There should be no trailing white-space at the end of a line.
┃       test/support/component_case.ex:4:1 #(RivaAshWeb.ComponentCase)
┃ [R] ↘ Do not use parentheses when defining a function which has no arguments.
┃       test/riva_ash_web/live/reservation_live_test.exs:35:8 #(RivaAshWeb.ReservationLiveTest.invalid_params_missing_required)
┃ [R] ↘ Do not use parentheses when defining a function which has no arguments.
┃       test/riva_ash_web/live/reservation_live_test.exs:23:8 #(RivaAshWeb.ReservationLiveTest.valid_params)
┃ [R] ↘ The alias `RivaAsh.Resources.Reservation` is not alphabetically ordered among its group.
┃       test/riva_ash_web/live/reservation_live_test.exs:13:9 #(RivaAshWeb.ReservationLiveTest)
┃ [R] ↘ Do not use parentheses when defining a function which has no arguments.
┃       test/riva_ash_web/live/payment_live_test.exs:20:8 #(RivaAshWeb.PaymentLiveTest.create_reservation_with_outstanding_balance)
┃ [R] ↘ The alias `RivaAsh.Resources.Reservation` is not alphabetically ordered among its group.
┃       test/riva_ash_web/live/payment_live_test.exs:13:28 #(RivaAshWeb.PaymentLiveTest)
┃ [R] ↘ The alias `RivaAsh.Accounts.User` is not alphabetically ordered among its group.
┃       test/riva_ash_web/authentication_flow_test.exs:5:9 #(RivaAshWeb.AuthenticationFlowTest)
┃ [R] ↘ The alias `RivaAsh.Resources.Employee` is not alphabetically ordered among its group.
┃       test/riva_ash/security_test.exs:9:38 #(RivaAsh.SecurityTest)
┃ [R] ↘ The alias `RivaAsh.Resources.Reservation` is not alphabetically ordered among its group.
┃       test/riva_ash/resources/reservation_test.exs:3:28 #(RivaAsh.Resources.ReservationTest)
┃ [R] ↘ The alias `RivaAsh.Resources.Reservation` is not alphabetically ordered among its group.
┃       test/riva_ash/resources/reservation_resource_test.exs:4:9 #(RivaAsh.Resources.ReservationResourceTest)
┃ [R] ↘ The alias `RivaAsh.Resources.User` is not alphabetically ordered among its group.
┃       test/riva_ash/resources/public_search_test.exs:4:44 #(RivaAsh.Resources.PublicSearchTest)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       test/riva_ash/resources/pricing_resource_test.exs:4:9 #(RivaAsh.Resources.PricingResourceTest)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       test/riva_ash/resources/payment_resource_test.exs:4:9 #(RivaAsh.Resources.PaymentResourceTest)
┃ [R] ↘ The alias `RivaAsh.Resources.Section` is not alphabetically ordered among its group.
┃       test/riva_ash/reactors/example_reactor_test.exs:5:38 #(RivaAsh.Reactors.ExampleReactorTest)
┃ [R] ↘ The alias `RivaAsh.Resources.Plot` is not alphabetically ordered among its group.
┃       test/riva_ash/reactors/business_setup_flow_test.exs:5:38 #(RivaAsh.Reactors.BusinessSetupFlowTest)
┃ [R] ↘ The alias `RivaAsh.Resources.Reservation` is not alphabetically ordered among its group.
┃       test/riva_ash/policies/ownership_check_test.exs:6:9 #(RivaAsh.Policies.OwnershipCheckTest)
┃ [R] ↘ The alias `RivaAsh.Resources.ItemHold` is not alphabetically ordered among its group.
┃       test/riva_ash/jobs/hold_cleanup_job_test.exs:6:9 #(RivaAsh.Jobs.HoldCleanupJobTest)
┃ [R] ↘ Do not use parentheses when defining a function which has no arguments.
┃       test/riva_ash/jobs/gdpr_retention_job_test.exs:16:8 #(RivaAsh.Jobs.GDPRRetentionJobTest.fetch_stats)
┃ [R] ↘ The alias `RivaAsh.Jobs.GDPRRetentionJob` is not alphabetically ordered among its group.
┃       test/riva_ash/jobs/gdpr_retention_job_test.exs:7:9 #(RivaAsh.Jobs.GDPRRetentionJobTest)
┃ [R] ↘ The alias `RivaAsh.Resources.ItemSchedule` is not alphabetically ordered among its group.
┃       test/riva_ash/availability_test.exs:5:9 #(RivaAsh.AvailabilityTest)
┃ [R] ↘ The alias `RivaAsh.Resources.Permission` is not alphabetically ordered among its group.
┃       test/paper_trail_archival_test.exs:13:56 #(RivaAsh.PaperTrailArchivalTest)
┃ [R] ↘ The alias `RivaAsh.Resources.Business` is not alphabetically ordered among its group.
┃       test/archival_test.exs:11:9 #(RivaAsh.ArchivalTest)
┃ [R] ↘ The alias `RivaAsh.Accounts.User` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/live/superadmin_dashboard_live.ex:13:9 #(RivaAshWeb.SuperadminDashboardLive)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/all_atoms.ex:52:47 #(RivaAshWeb.Components.Atoms.AllAtoms.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/all_atoms.ex:51:46 #(RivaAshWeb.Components.Atoms.AllAtoms.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/all_atoms.ex:50:44 #(RivaAshWeb.Components.Atoms.AllAtoms.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/all_atoms.ex:49:45 #(RivaAshWeb.Components.Atoms.AllAtoms.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/all_atoms.ex:48:44 #(RivaAshWeb.Components.Atoms.AllAtoms.__using__)
┃ [R] ↘ The alias `RivaAshWeb.Components.UI.Text` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/components/atoms/all_atoms.ex:47:13 #(RivaAshWeb.Components.Atoms.AllAtoms.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/all_atoms.ex:47:44 #(RivaAshWeb.Components.Atoms.AllAtoms.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/all_atoms.ex:46:45 #(RivaAshWeb.Components.Atoms.AllAtoms.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atoms/all_atoms.ex:45:46 #(RivaAshWeb.Components.Atoms.AllAtoms.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atomic_components.ex:47:44 #(RivaAshWeb.Components.AtomicComponents.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atomic_components.ex:46:45 #(RivaAshWeb.Components.AtomicComponents.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atomic_components.ex:45:44 #(RivaAshWeb.Components.AtomicComponents.__using__)
┃ [R] ↘ The alias `RivaAshWeb.Components.UI.Text` is not alphabetically ordered among its group.
┃       lib/riva_ash_web/components/atomic_components.ex:44:13 #(RivaAshWeb.Components.AtomicComponents.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atomic_components.ex:44:44 #(RivaAshWeb.Components.AtomicComponents.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atomic_components.ex:43:45 #(RivaAshWeb.Components.AtomicComponents.__using__)
┃ [R] ↘ Avoid using the `:as` option with `alias`.
┃       lib/riva_ash_web/components/atomic_components.ex:42:46 #(RivaAshWeb.Components.AtomicComponents.__using__)
┃ [R] ↘ There should be no trailing white-space at the end of a line.
┃       lib/riva_ash/resources/user.ex:4:1 #(RivaAsh.Accounts.User)
┃ [R] ↘ There should be no trailing white-space at the end of a line.
┃       lib/riva_ash/resources/token.ex:4:1 #(RivaAsh.Accounts.Token)
┃ [R] ↘ The alias `RivaAsh.Resources` is not alphabetically ordered among its group.
┃       lib/riva_ash/reactors/example_reactor.ex:17:9 #(RivaAsh.Reactors.ExampleReactor)
┃ [R] ↘ Prefer using an implicit `try` rather than explicit `try`.
┃       test/unit_test_helper.exs:33:3 #()
┃ [R] ↘ There should be a final \n at the end of each file.
┃       config/test.exs:75 #()
┃ [R] ↘ Line is too long (max is 120, was 164).
┃       config/test.exs:21:121 #()

  Refactoring opportunities                                                                                                                                            
┃ 
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash_web/live/section_live.ex:372:11 #(RivaAshWeb.SectionLive.handle_event)
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash_web/live/reservation_live.ex:395:11 #(RivaAshWeb.ReservationLive.handle_event)
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:397:11 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/schedule/schedule_service.ex:93:5 #(RivaAsh.Schedule.ScheduleService.update_schedule)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/position/position_service.ex:93:5 #(RivaAsh.Position.PositionService.update_position)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/item/item_service.ex:88:5 #(RivaAsh.Item.ItemService.update_item)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/hold/hold_service.ex:106:5 #(RivaAsh.Hold.HoldService.update_hold)
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash_web/controllers/error_json.ex:116:5 #(RivaAshWeb.ErrorJSON.format_ash_validation_errors)
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash_web/controllers/auth_controller.ex:233:9 #(RivaAshWeb.AuthController.format_changeset_errors)
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash_web/components/forms/token_form.ex:259:5 #(RivaAshWeb.Components.Forms.TokenForm.format_errors)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/schedule/schedule_service.ex:150:5 #(RivaAsh.Schedule.ScheduleService.deactivate_schedule)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/schedule/schedule_service.ex:131:5 #(RivaAsh.Schedule.ScheduleService.activate_schedule)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/schedule/schedule_service.ex:112:5 #(RivaAsh.Schedule.ScheduleService.delete_schedule)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/schedule/schedule_service.ex:74:5 #(RivaAsh.Schedule.ScheduleService.create_schedule)
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash/recurring_reservations.ex:590:9 #(RivaAsh.RecurringReservations.format_error_message)
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash/reactors/business_setup_flow.ex:141:5 #(RivaAsh.Reactors.BusinessSetupFlow.format_changeset_errors)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/position/position_service.ex:150:5 #(RivaAsh.Position.PositionService.deactivate_position)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/position/position_service.ex:131:5 #(RivaAsh.Position.PositionService.activate_position)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/position/position_service.ex:112:5 #(RivaAsh.Position.PositionService.delete_position)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/position/position_service.ex:74:5 #(RivaAsh.Position.PositionService.create_position)
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash/people/people_service.ex:519:7 #(RivaAsh.People.PeopleService.generate_csv_content)
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash/people/people_service.ex:511:7 #(RivaAsh.People.PeopleService.generate_csv_content)
┃ [F] ↗ Unless conditions should avoid having an `else` block.
┃       lib/riva_ash/people/people_service.ex:95:5 #(RivaAsh.People.PeopleService.filter_people_by_business)
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash/mermaid.ex:84:7 #(RivaAsh.Mermaid.format_attributes)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/jobs/hold_cleanup_job.ex:376:5 #(RivaAsh.Jobs.HoldCleanupJob.deactivate_hold)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/item/item_service.ex:107:5 #(RivaAsh.Item.ItemService.delete_item)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/item/item_service.ex:69:5 #(RivaAsh.Item.ItemService.create_item)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/hold/hold_service.ex:87:5 #(RivaAsh.Hold.HoldService.create_hold)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/hold/hold_service.ex:68:5 #(RivaAsh.Hold.HoldService.delete_hold)
┃ [F] ↗ Last clause in `with` is redundant.
┃       lib/riva_ash/hold/hold_service.ex:49:5 #(RivaAsh.Hold.HoldService.cancel_hold)
┃ [F] ↗ `Enum.map_join/3` is more efficient than `Enum.map/2 |> Enum.join/2`.
┃       lib/riva_ash/reactors/example_reactor.ex:125:5 #(RivaAsh.Reactors.ExampleReactor.format_changeset_errors)
┃ [F] ↗ Avoid negated conditions in if-else blocks.
┃       test/test_helper.exs:126:4 #()
┃ [F] ↗ Avoid negated conditions in if-else blocks.
┃       test/test_helper.exs:50:6 #()
┃ [F] → Function takes too many parameters (arity is 8, max is 3).
┃       test/support/mocks/repo_mock.ex:43:7 #(RivaAsh.Repo.Mock.insert_all)
┃ [F] → Function takes too many parameters (arity is 7, max is 3).
┃       lib/riva_ash_web/components/molecules/confirm_dialog.ex:236:8 #(RivaAshWeb.Components.Molecules.ConfirmDialog.render_dialog_content)
┃ [F] → Function takes too many parameters (arity is 6, max is 3).
┃       test/support/mocks/repo_mock.ex:47:7 #(RivaAsh.Repo.Mock.update)
┃ [F] → Function takes too many parameters (arity is 6, max is 3).
┃       test/support/mocks/repo_mock.ex:46:7 #(RivaAsh.Repo.Mock.insert)
┃ [F] → Function takes too many parameters (arity is 6, max is 3).
┃       test/support/mocks/repo_mock.ex:35:7 #(RivaAsh.Repo.Mock.execute)
┃ [F] → Function takes too many parameters (arity is 6, max is 3).
┃       lib/riva_ash/schedule/schedule_service.ex:179:7 #(RivaAsh.Schedule.ScheduleService.check_schedule_conflict)
┃ [F] → Function takes too many parameters (arity is 6, max is 3).
┃       lib/riva_ash/resources/item_position.ex:366:8 #(RivaAsh.Resources.ItemPosition.check_position_overlap)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       test/support/mocks/repo_mock.ex:48:7 #(RivaAsh.Repo.Mock.delete)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       test/support/mocks/repo_mock.ex:36:7 #(RivaAsh.Repo.Mock.stream)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash_web/live/auth_helpers.ex:217:7 #(RivaAshWeb.Live.AuthHelpers.mount_business_scoped)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:147:8 #(RivaAshWeb.Components.Molecules.TabNavigation.render_tab)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash_web/components/molecules/notification_toast.ex:267:8 #(RivaAshWeb.Components.Molecules.NotificationToast.render_content)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/resources/item_position.ex:343:8 #(RivaAsh.Resources.ItemPosition.check_layout_bounds)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/permissions/constants.ex:881:8 #(RivaAsh.Permissions.Constants.build_permission_metadata_entry)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/mermaid.ex:159:8 #(RivaAsh.Mermaid.build_relationship_line)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/mermaid.ex:151:8 #(RivaAsh.Mermaid.format_relationship_line)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/date_time_helpers.ex:274:8 #(RivaAsh.DateTimeHelpers.build_datetime_range)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/availability.ex:237:8 #(RivaAsh.Availability.find_blocking_exceptions)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/availability.ex:168:8 #(RivaAsh.Availability.check_day_schedule)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/availability.ex:92:8 #(RivaAsh.Availability.get_base_slots)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/availability.ex:88:8 #(RivaAsh.Availability.get_base_slots)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/riva_ash/resources/item_position.ex:398:39 #(RivaAsh.Resources.ItemPosition.check_position_overlap)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/riva_ash/availability.ex:179:36 #(RivaAsh.Availability.check_day_schedule)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash/resources/item_position.ex:343:8 #(RivaAsh.Resources.ItemPosition.check_layout_bounds)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/mermaid.ex:159:8 #(RivaAsh.Mermaid.build_relationship_line)
┃ [F] → Function is too complex (cyclomatic complexity is 21, max is 6).
┃       test/riva_ash_web/route_enumeration_test.exs:158:8 #(RivaAshWeb.RouteEnumerationTest.test_single_route)
┃ [F] → Function is too complex (cyclomatic complexity is 11, max is 6).
┃       lib/riva_ash/people/people_service.ex:321:7 #(RivaAsh.People.PeopleService.get_person)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/validations/reservation_time_slot.ex:35:8 #(RivaAsh.Validations.ReservationTimeSlot.validate_time_slot_availability)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       test/support/factory.ex:393:7 #(RivaAsh.Factory.attrs_list)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/riva_ash_web/live/user_live.ex:22:11 #(RivaAshWeb.UserLive.mount)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/riva_ash_web/live/token_live.ex:27:11 #(RivaAshWeb.TokenLive.mount)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash_web/live/reservation_center_live.ex:408:7 #(RivaAshWeb.ReservationCenterLive.handle_event)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash_web/components/atoms/time_picker.ex:146:8 #(RivaAshWeb.Components.Atoms.TimePicker.build_input_class)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash_web/components/atoms/date_picker.ex:113:8 #(RivaAshWeb.Components.Atoms.DatePicker.build_input_class)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash_web/components/atoms/color_picker.ex:248:8 #(RivaAshWeb.Components.Atoms.ColorPicker.build_text_input_class)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash_web/components/atoms/color_picker.ex:225:8 #(RivaAshWeb.Components.Atoms.ColorPicker.build_input_class)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/riva_ash/availability.ex:398:37 #(RivaAsh.Availability.filter_exceptions)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/mix/tasks/create_superadmin.ex:68:32 #(Mix.Tasks.CreateSuperadmin.create_superadmin)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       test/support/property_helpers.ex:174:7 #(RivaAsh.PropertyHelpers.test_datetime_validation)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       test/support/mox_helpers.ex:110:8 #(RivaAsh.Test.MoxHelpers.maybe_stub)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       test/support/jsonapi_helpers.ex:58:12 #(RivaAsh.Test.JsonApiHelpers.json_api_delete)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       test/support/jsonapi_helpers.ex:50:12 #(RivaAsh.Test.JsonApiHelpers.json_api_patch)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       test/support/jsonapi_helpers.ex:42:12 #(RivaAsh.Test.JsonApiHelpers.json_api_post)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/telemetry.ex:443:7 #(RivaAshWeb.Telemetry.emit_reservation_created)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/telemetry.ex:423:7 #(RivaAshWeb.Telemetry.emit_authorization_denied)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/telemetry.ex:375:7 #(RivaAshWeb.Telemetry.handle_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/telemetry.ex:367:7 #(RivaAshWeb.Telemetry.handle_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/telemetry.ex:359:7 #(RivaAshWeb.Telemetry.handle_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/telemetry.ex:347:7 #(RivaAshWeb.Telemetry.handle_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/telemetry.ex:335:7 #(RivaAshWeb.Telemetry.handle_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/telemetry.ex:321:7 #(RivaAshWeb.Telemetry.handle_event)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/live/token_live.ex:556:8 #(RivaAshWeb.TokenLive.build_meta)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:563:8 #(RivaAshWeb.RecurringReservationInstanceLive.build_meta)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/live/plot_live.ex:431:8 #(RivaAshWeb.PlotLive.build_meta)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/live/global_search_live.ex:89:8 #(RivaAshWeb.GlobalSearchLive.maybe_perform_search)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/live/global_search_live.ex:82:8 #(RivaAshWeb.GlobalSearchLive.maybe_perform_search)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/live/dev_tools/performance_dashboard_live.ex:368:10 #(RivaAshWeb.DevTools.PerformanceDashboardLive.handle_telemetry_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/live/dev_tools/ash_inspector_live.ex:348:10 #(RivaAshWeb.DevTools.AshInspectorLive.handle_telemetry_event)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/live/auth/sign_in_live.ex:158:7 #(RivaAshWeb.Auth.SignInLive.handle_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/dev_tools/metrics_store.ex:407:8 #(RivaAshWeb.DevTools.MetricsStore.handle_telemetry_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/dev_tools/metrics_store.ex:394:8 #(RivaAshWeb.DevTools.MetricsStore.handle_telemetry_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/dev_tools/metrics_store.ex:381:8 #(RivaAshWeb.DevTools.MetricsStore.handle_telemetry_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/dev_tools/metrics_store.ex:368:8 #(RivaAshWeb.DevTools.MetricsStore.handle_telemetry_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/dev_tools/metrics_store.ex:354:8 #(RivaAshWeb.DevTools.MetricsStore.handle_telemetry_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/dev_tools/metrics_store.ex:341:8 #(RivaAshWeb.DevTools.MetricsStore.handle_telemetry_event)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/controllers/health_controller.ex:163:8 #(RivaAshWeb.HealthController.send_health_response)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/navigation/search_global.ex:142:8 #(RivaAshWeb.Components.Navigation.SearchGlobal.build_no_results_class)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:234:8 #(RivaAshWeb.Components.Molecules.TabNavigation.build_tab_class)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:230:8 #(RivaAshWeb.Components.Molecules.TabNavigation.build_tab_class)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:226:8 #(RivaAshWeb.Components.Molecules.TabNavigation.build_tab_class)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:222:8 #(RivaAshWeb.Components.Molecules.TabNavigation.build_tab_class)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:218:8 #(RivaAshWeb.Components.Molecules.TabNavigation.build_tab_class)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:214:8 #(RivaAshWeb.Components.Molecules.TabNavigation.build_tab_class)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:210:8 #(RivaAshWeb.Components.Molecules.TabNavigation.build_tab_class)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/interactive/grid_position_picker.ex:388:8 #(RivaAshWeb.Components.Interactive.GridPositionPicker.selected_position?)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/atoms/text.ex:317:8 #(RivaAshWeb.Components.Atoms.Text.render_p)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/atoms/text.ex:311:8 #(RivaAshWeb.Components.Atoms.Text.render_code)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/atoms/text.ex:305:8 #(RivaAshWeb.Components.Atoms.Text.render_label)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/atoms/text.ex:299:8 #(RivaAshWeb.Components.Atoms.Text.render_h6)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/atoms/text.ex:293:8 #(RivaAshWeb.Components.Atoms.Text.render_h5)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/atoms/text.ex:287:8 #(RivaAshWeb.Components.Atoms.Text.render_h4)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/atoms/text.ex:281:8 #(RivaAshWeb.Components.Atoms.Text.render_h3)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/atoms/text.ex:275:8 #(RivaAshWeb.Components.Atoms.Text.render_h2)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash_web/components/atoms/text.ex:269:8 #(RivaAshWeb.Components.Atoms.Text.render_h1)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/components/atoms/file_upload.ex:183:8 #(RivaAshWeb.Components.Atoms.FileUpload.build_drop_zone_class)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/resources/item_hold.ex:307:8 #(RivaAsh.Resources.ItemHold.check_for_overlapping_holds)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash/resources/item_hold.ex:307:8 #(RivaAsh.Resources.ItemHold.check_for_overlapping_holds)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/recurring_reservations.ex:497:8 #(RivaAsh.RecurringReservations.build_availability_result)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/recurring_reservations.ex:493:8 #(RivaAsh.RecurringReservations.build_availability_result)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/recurring_reservations.ex:485:8 #(RivaAsh.RecurringReservations.build_availability_result)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/recurring_reservations.ex:477:8 #(RivaAsh.RecurringReservations.build_availability_result)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/recurring_reservations.ex:468:8 #(RivaAsh.RecurringReservations.build_availability_result)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/queries.ex:300:8 #(RivaAsh.Queries.calculate_workload)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/queries.ex:178:8 #(RivaAsh.Queries.calculate_metrics)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/position/position_service.ex:170:7 #(RivaAsh.Position.PositionService.validate_coordinates)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/permissions.ex:248:8 #(RivaAsh.Permissions.create_permission_assignment)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/permissions.ex:138:8 #(RivaAsh.Permissions.create_permission_record)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/permissions.ex:112:7 #(RivaAsh.Permissions.grant_permission)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/jobs/hold_cleanup_job.ex:123:8 #(RivaAsh.Jobs.HoldCleanupJob.build_stats_response)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/jobs/gdpr_retention_job.ex:234:8 #(RivaAsh.Jobs.GDPRRetentionJob.merge_results)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/jobs/gdpr_retention_job.ex:178:8 #(RivaAsh.Jobs.GDPRRetentionJob.handle_cleanup_result)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/jobs/gdpr_retention_job.ex:166:8 #(RivaAsh.Jobs.GDPRRetentionJob.handle_cleanup_result)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/gdpr/data_subject_rights.ex:356:8 #(RivaAsh.GDPR.DataSubjectRights.log_data_subject_request)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/booking.ex:342:8 #(RivaAsh.Booking.times_overlap?)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/booking.ex:309:8 #(RivaAsh.Booking.generate_slots)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/booking.ex:179:7 #(RivaAsh.Booking.get_availability)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/availability.ex:444:8 #(RivaAsh.Availability.filter_slots_by_capacity)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/availability.ex:422:8 #(RivaAsh.Availability.filter_reservations)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/availability.ex:380:8 #(RivaAsh.Availability.do_generate_slots)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/availability.ex:331:8 #(RivaAsh.Availability.get_scheduled_slots)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/availability.ex:268:8 #(RivaAsh.Availability.check_reservation_conflicts)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/availability.ex:190:8 #(RivaAsh.Availability.time_in_schedule?)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/availability.ex:160:8 #(RivaAsh.Availability.all_dates_in_schedule?)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/availability.ex:101:8 #(RivaAsh.Availability.filter_and_sort_slots)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       test/support/test_helpers.ex:291:7 #(RivaAsh.TestHelpers.create_section)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       test/support/test_helpers.ex:129:7 #(RivaAsh.TestHelpers.assert_maps_match)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       test/riva_ash_web/route_navigation_property_test.exs:767:8 #(RivaAshWeb.RouteNavigationPropertyTest.validate_auth_response)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/permission/permission_service.ex:181:7 #(RivaAsh.Permission.PermissionService.update_permission)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/people/people_service.ex:244:7 #(RivaAsh.People.PeopleService.update_employee)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/people/people_service.ex:213:7 #(RivaAsh.People.PeopleService.update_client)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/payment/payment_service.ex:91:7 #(RivaAsh.Payment.PaymentService.update_payment)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/layout/layout_service.ex:91:7 #(RivaAsh.Layout.LayoutService.update_layout)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/item_type/type_service.ex:91:7 #(RivaAsh.ItemType.TypeService.update_type)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/availability.ex:122:8 #(RivaAsh.Availability.validate_duration)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/mix/tasks/create_superadmin.ex:52:8 #(Mix.Tasks.CreateSuperadmin.create_superadmin)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/test_helpers.ex:148:9 #(RivaAsh.TestHelpers.assert_maps_match)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:402:46 #(RivaAsh.Factory.attrs_list)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:401:48 #(RivaAsh.Factory.attrs_list)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:400:44 #(RivaAsh.Factory.attrs_list)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:399:38 #(RivaAsh.Factory.attrs_list)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:398:52 #(RivaAsh.Factory.attrs_list)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:397:38 #(RivaAsh.Factory.attrs_list)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:396:42 #(RivaAsh.Factory.attrs_list)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:395:46 #(RivaAsh.Factory.attrs_list)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/token_live.ex:353:7 #(RivaAshWeb.TokenLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/token_live.ex:275:11 #(RivaAshWeb.TokenLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/token_live.ex:257:7 #(RivaAshWeb.TokenLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/section_live.ex:340:7 #(RivaAshWeb.SectionLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/section_live.ex:261:11 #(RivaAshWeb.SectionLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/section_live.ex:231:11 #(RivaAshWeb.SectionLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/reservation_live.ex:363:7 #(RivaAshWeb.ReservationLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/reservation_live.ex:282:11 #(RivaAshWeb.ReservationLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/reservation_live.ex:250:11 #(RivaAshWeb.ReservationLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:364:7 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:273:11 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:249:7 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/employee_live.ex:324:11 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/employee_live.ex:299:72 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/employee_live.ex:273:7 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/employee_live.ex:259:9 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/employee_live.ex:244:9 #(RivaAshWeb.EmployeeLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/employee_live.ex:46:94 #(RivaAshWeb.EmployeeLive.mount)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/auth/register_live.ex:174:75 #(RivaAshWeb.Auth.RegisterLive.handle_event)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/auth/register_live.ex:24:7 #(RivaAshWeb.Auth.RegisterLive.mount)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/booking.ex:147:7 #(RivaAsh.Booking.maybe_register_client)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/booking.ex:64:5 #(RivaAsh.Booking.handle_client_creation)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/availability.ex:149:7 #(RivaAsh.Availability.check_schedule_availability)
┃ [F] → Function body is nested too deep (max depth is 2, was 8).
┃       test/support/factory.ex:248:23 #(RivaAsh.Factory.reservation_attrs)
┃ [F] → Function body is nested too deep (max depth is 2, was 6).
┃       test/support/factory.ex:197:44 #(RivaAsh.Factory.client_attrs)
┃ [F] → Function is too complex (cyclomatic complexity is 17, max is 6).
┃       test/support/factory.ex:359:7 #(RivaAsh.Factory.create)
┃ [F] → Function body is nested too deep (max depth is 2, was 5).
┃       test/support/factory.ex:219:51 #(RivaAsh.Factory.item_attrs)
┃ [F] → Function is too complex (cyclomatic complexity is 14, max is 6).
┃       test/riva_ash_web/storybook_property_test.exs:324:8 #(RivaAshWeb.StorybookPropertyTest.guard_validate_props)
┃ [F] → Function takes too many parameters (arity is 7, max is 3).
┃       lib/riva_ash/position/position_service.ex:196:7 #(RivaAsh.Position.PositionService.check_overlap)
┃ [F] → Function is too complex (cyclomatic complexity is 13, max is 6).
┃       lib/riva_ash/item_type/type_service.ex:239:7 #(RivaAsh.ItemType.TypeService.validate_type_attrs)
┃ [F] → Function body is nested too deep (max depth is 2, was 4).
┃       test/support/property_helpers.ex:141:15 #(RivaAsh.PropertyHelpers.create_scenario)
┃ [F] → Function body is nested too deep (max depth is 2, was 4).
┃       test/support/factory.ex:337:55 #(RivaAsh.Factory.employee_attrs)
┃ [F] → Function body is nested too deep (max depth is 2, was 4).
┃       test/support/factory.ex:317:33 #(RivaAsh.Factory.item_type_attrs)
┃ [F] → Function body is nested too deep (max depth is 2, was 4).
┃       test/support/factory.ex:280:71 #(RivaAsh.Factory.plot_attrs)
┃ [F] → Function body is nested too deep (max depth is 2, was 4).
┃       test/riva_ash_web/storybook_property_test.exs:616:15 #(RivaAshWeb.StorybookPropertyTest.assert_text_html_tag)
┃ [F] → Function takes too many parameters (arity is 6, max is 3).
┃       lib/riva_ash_web/controllers/booking_controller.ex:166:8 #(RivaAshWeb.BookingController.render_availability_response)
┃ [F] → Function takes too many parameters (arity is 6, max is 3).
┃       lib/riva_ash_web/components/molecules/progress_bar.ex:242:8 #(RivaAshWeb.Components.Molecules.ProgressBar.render_progress_bar_content)
┃ [F] → Function takes too many parameters (arity is 6, max is 3).
┃       lib/riva_ash_web/components/molecules/breadcrumb_nav.ex:191:8 #(RivaAshWeb.Components.Molecules.BreadcrumbNav.render_breadcrumb_item)
┃ [F] → Function takes too many parameters (arity is 6, max is 3).
┃       lib/riva_ash/validations.ex:1125:8 #(RivaAsh.Validations.check_pricing_date_overlap)
┃ [F] → Function body is nested too deep (max depth is 2, was 4).
┃       lib/riva_ash/resources/item_hold.ex:600:17 #(RivaAsh.Resources.ItemHold.formatted_info)
┃ [F] → Function is too complex (cyclomatic complexity is 11, max is 6).
┃       test/riva_ash_web/route_navigation_property_test.exs:585:8 #(RivaAshWeb.RouteNavigationPropertyTest.navigable_path?)
┃ [F] → Function is too complex (cyclomatic complexity is 11, max is 6).
┃       test/riva_ash_web/route_enumeration_test.exs:235:8 #(RivaAshWeb.RouteEnumerationTest.test_routes_with_params)
┃ [F] → Function is too complex (cyclomatic complexity is 11, max is 6).
┃       lib/riva_ash_web/components/molecules/pagination.ex:146:8 #(RivaAshWeb.Components.Molecules.Pagination.validate_meta)
┃ [F] → Function is too complex (cyclomatic complexity is 11, max is 6).
┃       lib/riva_ash_web/components/interactive/monthly_calendar.ex:368:8 #(RivaAshWeb.Components.Interactive.MonthlyCalendar.get_days_in_month)
┃ [F] → Function is too complex (cyclomatic complexity is 11, max is 6).
┃       lib/riva_ash_web/components/atoms/time_picker.ex:96:8 #(RivaAshWeb.Components.Atoms.TimePicker.parse_time)
┃ [F] → Function is too complex (cyclomatic complexity is 11, max is 6).
┃       lib/riva_ash/resources/layout.ex:416:7 #(RivaAsh.Resources.Layout.grid_info)
┃ [F] → Function is too complex (cyclomatic complexity is 10, max is 6).
┃       lib/riva_ash_web/components/atoms/modal.ex:152:8 #(RivaAshWeb.Components.Atoms.Modal.build_modal_class)
┃ [F] → Function is too complex (cyclomatic complexity is 10, max is 6).
┃       lib/riva_ash_web/components/atoms/icon.ex:114:8 #(RivaAshWeb.Components.Atoms.Icon.render_icon_path)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/validations.ex:248:8 #(RivaAsh.Validations.build_overlap_query)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/validations.ex:213:8 #(RivaAsh.Validations.build_and_execute_overlap_query)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/validations.ex:119:7 #(RivaAsh.Validations.check_reservation_overlap)
┃ [F] → Function takes too many parameters (arity is 5, max is 3).
┃       lib/riva_ash/validations.ex:90:8 #(RivaAsh.Validations.check_reservation_availability)
┃ [F] → Function is too complex (cyclomatic complexity is 10, max is 6).
┃       lib/riva_ash/resources/item_position.ex:581:7 #(RivaAsh.Resources.ItemPosition.overlaps_with?)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       test/support/factory.ex:299:22 #(RivaAsh.Factory.section_attrs)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       test/support/factory.ex:165:22 #(RivaAsh.Factory.business_attrs)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       test/riva_ash_web/storybook_property_test.exs:386:11 #(RivaAshWeb.StorybookPropertyTest.assert_button_attributes)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       test/riva_ash_web/route_navigation_property_test.exs:792:8 #(RivaAshWeb.RouteNavigationPropertyTest.generate_smart_params)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash_web/live/item_schedule_live.ex:214:8 #(RivaAshWeb.ItemScheduleLive.format_day_of_week)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash_web/components/navigation/search_global.ex:159:8 #(RivaAshWeb.Components.Navigation.SearchGlobal.humanize_type)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash_web/components/navigation/search_global.ex:146:8 #(RivaAshWeb.Components.Navigation.SearchGlobal.get_result_icon)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/riva_ash_web/components/atoms/time_picker.ex:105:13 #(RivaAshWeb.Components.Atoms.TimePicker.parse_time)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/riva_ash/validations.ex:1043:13 #(RivaAsh.Validations.check_reservation_payment_business_match)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash/storybook_testing/property_generators.ex:202:7 #(RivaAsh.StorybookTesting.PropertyGenerators.component_test_case)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash/resources/plot.ex:281:7 #(RivaAsh.Resources.Plot.area_unit_description)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/riva_ash/resources/permission.ex:295:13 #(RivaAsh.Resources.Permission.assigned_employee_names)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash/resources/item_schedule.ex:296:9 #(RivaAsh.Resources.ItemSchedule.day_name)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/riva_ash/resources/item.ex:507:37 #(RivaAsh.Resources.Item.available_now?)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/riva_ash/reactors/reservation_reactor.ex:302:13 #(RivaAsh.Reactors.ReservationReactor.format_changeset_errors)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash/permission/permission_service.ex:261:7 #(RivaAsh.Permission.PermissionService.delete_employee)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       lib/riva_ash/permission/permission_service.ex:212:7 #(RivaAsh.Permission.PermissionService.delete_permission)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       lib/mix/tasks/create_superadmin.ex:91:31 #(Mix.Tasks.CreateSuperadmin.promote_existing_user)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:489:8 #(RivaAshWeb.RecurringReservationInstanceLive.get_field_value)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/live/plot_live.ex:357:8 #(RivaAshWeb.PlotLive.get_field_value)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/components/ui/button.ex:94:8 #(RivaAshWeb.Components.UI.Button.variant_classes)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/components/ui/badge.ex:62:8 #(RivaAshWeb.Components.UI.Badge.variant_classes)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/components/ui/badge.ex:40:8 #(RivaAshWeb.Components.UI.Badge.build_content_class)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/components/interactive/plot_layout_designer.ex:316:8 #(RivaAshWeb.Components.Interactive.PlotLayoutDesigner.valid_section?)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/components/atoms/link.ex:133:8 #(RivaAshWeb.Components.Atoms.Link.base_classes)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/components/atoms/divider.ex:115:8 #(RivaAshWeb.Components.Atoms.Divider.color_classes)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/components/atoms/avatar.ex:148:8 #(RivaAshWeb.Components.Atoms.Avatar.icon_size)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/components/atoms/avatar.ex:124:8 #(RivaAshWeb.Components.Atoms.Avatar.status_position)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash_web/components/atoms/avatar.ex:85:8 #(RivaAshWeb.Components.Atoms.Avatar.size_classes)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/validations.ex:1237:8 #(RivaAsh.Validations.check_single_active_base_pricing)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/validations.ex:1197:8 #(RivaAsh.Validations.check_single_active_base_pricing)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/validations.ex:475:8 #(RivaAsh.Validations.check_holds_or_availability)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/validations.ex:471:8 #(RivaAsh.Validations.check_holds_or_availability)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/validations.ex:407:8 #(RivaAsh.Validations.check_schedule_and_exceptions)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/validations.ex:388:8 #(RivaAsh.Validations.check_additional_constraints)
┃ [F] → Function takes too many parameters (arity is 4, max is 3).
┃       lib/riva_ash/validations.ex:318:7 #(RivaAsh.Validations.check_item_availability)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash/resources/pricing.ex:377:8 #(RivaAsh.Resources.Pricing.build_effective_pricing_filter)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash/resources/item_position.ex:710:7 #(RivaAsh.Resources.ItemPosition.valid_dimensions?)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash/payment/payment_service.ex:225:7 #(RivaAsh.Payment.PaymentService.refund_payment)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash/payment/payment_service.ex:190:7 #(RivaAsh.Payment.PaymentService.cancel_payment)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/riva_ash/payment/payment_service.ex:153:7 #(RivaAsh.Payment.PaymentService.process_payment)
┃ [F] → Function is too complex (cyclomatic complexity is 8, max is 6).
┃       lib/mix/tasks/erd.ex:29:7 #(Mix.Tasks.Erd.run)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       test/support/liveview_helpers.ex:40:7 #(RivaAsh.Test.LiveViewHelpers.assert_has)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       test/riva_ash_web/storybook_property_test.exs:506:8 #(RivaAshWeb.StorybookPropertyTest.assert_input_attributes)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       test/riva_ash_web/storybook_property_test.exs:198:9 #(RivaAshWeb.StorybookPropertyTest.TestShell.render_component_with_error_handling)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       test/riva_ash_web/storybook_property_test.exs:143:9 #(RivaAshWeb.StorybookPropertyTest.TestCore.measure_performance)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       test/riva_ash_web/route_enumeration_test.exs:294:8 #(RivaAshWeb.RouteEnumerationTest.test_error_routes)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       test/riva_ash_web/integration/no_db_integration_test.exs:246:8 #(RivaAshWeb.NoDatabaseIntegrationTest.validate_password_strength)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/live/token_live.ex:494:8 #(RivaAshWeb.TokenLive.apply_pagination)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/live/token_live.ex:483:8 #(RivaAshWeb.TokenLive.get_token_field_value)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:501:8 #(RivaAshWeb.RecurringReservationInstanceLive.apply_pagination)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/live/plot_live.ex:369:8 #(RivaAshWeb.PlotLive.apply_pagination)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/live/dev_tools/performance_dashboard_live.ex:66:9 #(RivaAshWeb.DevTools.PerformanceDashboardLive.handle_info)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/live/dev_tools/ash_inspector_live.ex:61:9 #(RivaAshWeb.DevTools.AshInspectorLive.handle_info)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/components/ui/textarea.ex:87:8 #(RivaAshWeb.Components.UI.Textarea.build_rows_class)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/components/ui/spinner.ex:68:8 #(RivaAshWeb.Components.UI.Spinner.build_label_class)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/components/navigation/notification_center.ex:154:8 #(RivaAshWeb.Components.Navigation.NotificationCenter.get_notification_icon)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:349:7 #(RivaAshWeb.Components.Forms.ReservationBookingForm.validate_booking_step_data)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/components/atoms/spinner.ex:135:8 #(RivaAshWeb.Components.Atoms.Spinner.label_class)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/components/atoms/spinner.ex:123:8 #(RivaAshWeb.Components.Atoms.Spinner.size_classes)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/components/atoms/image.ex:155:8 #(RivaAshWeb.Components.Atoms.Image.fit_classes)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/components/atoms/image.ex:143:8 #(RivaAshWeb.Components.Atoms.Image.size_classes)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/components/atoms/icon.ex:90:8 #(RivaAshWeb.Components.Atoms.Icon.size_class)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/components/atoms/container.ex:108:8 #(RivaAshWeb.Components.Atoms.Container.size_classes)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash_web/components/atoms/button.ex:116:8 #(RivaAshWeb.Components.Atoms.Button.map_variant)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/resources/plot.ex:563:7 #(RivaAsh.Resources.Plot.formatted_coordinates)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/resources/plot.ex:511:7 #(RivaAsh.Resources.Plot.validate_data)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/resources/permission.ex:287:9 #(RivaAsh.Resources.Permission.assigned_employee_names)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/resources/permission.ex:213:9 #(RivaAsh.Resources.Permission.category_description)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/resources/payment.ex:540:9 #(RivaAsh.Resources.Payment.status_description)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/resources/item_schedule.ex:525:9 #(RivaAsh.Resources.ItemSchedule.next_occurrence)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/resources/availability_exception.ex:141:7 #(RivaAsh.Resources.AvailabilityException.is_active?)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/payment/payment_service.ex:122:7 #(RivaAsh.Payment.PaymentService.delete_payment)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/layout/layout_service.ex:184:7 #(RivaAsh.Layout.LayoutService.deactivate_layout)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/layout/layout_service.ex:153:7 #(RivaAsh.Layout.LayoutService.activate_layout)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/layout/layout_service.ex:122:7 #(RivaAsh.Layout.LayoutService.delete_layout)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/item_type/type_service.ex:184:7 #(RivaAsh.ItemType.TypeService.deactivate_type)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/item_type/type_service.ex:153:7 #(RivaAsh.ItemType.TypeService.activate_type)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/item_type/type_service.ex:122:7 #(RivaAsh.ItemType.TypeService.delete_type)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       lib/riva_ash/booking.ex:226:8 #(RivaAsh.Booking.find_or_create_client)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       test/support/time_helpers.ex:62:5 #(RivaAsh.Test.TimeHelpers.clock_travel)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       test/support/time_helpers.ex:46:5 #(RivaAsh.Test.TimeHelpers.do_clock_freeze)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/property_testing/route_enumerator.ex:224:5 #(RivaAsh.PropertyTesting.RouteEnumerator.generate_route_params)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/property_testing/route_enumerator.ex:171:5 #(RivaAsh.PropertyTesting.RouteEnumerator.extract_param_types)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/property_testing/data_manager.ex:178:5 #(RivaAsh.PropertyTesting.DataManager.create_base_businesses)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/liveview_helpers.ex:81:37 #(RivaAsh.Test.LiveViewHelpers.click_testid)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:369:48 #(RivaAsh.Factory.create)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:368:50 #(RivaAsh.Factory.create)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:367:46 #(RivaAsh.Factory.create)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:366:40 #(RivaAsh.Factory.create)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:365:54 #(RivaAsh.Factory.create)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:364:40 #(RivaAsh.Factory.create)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:363:44 #(RivaAsh.Factory.create)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:362:48 #(RivaAsh.Factory.create)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       test/riva_ash_web/storybook_property_test.exs:881:9 #(RivaAshWeb.StorybookPropertyTest.assert_disabled_attributes)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       test/riva_ash_web/storybook_property_test.exs:871:5 #(RivaAshWeb.StorybookPropertyTest.assert_button_semantics)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       test/riva_ash_web/storybook_property_test.exs:841:5 #(RivaAshWeb.StorybookPropertyTest.assert_rendering_performance)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/storybook_property_test.exs:819:11 #(RivaAshWeb.StorybookPropertyTest.measure_rendering_time)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/storybook_property_test.exs:664:5 #(RivaAshWeb.StorybookPropertyTest.render_icon_component)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/storybook_property_test.exs:633:5 #(RivaAshWeb.StorybookPropertyTest.assert_text_security_controls)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/storybook_property_test.exs:578:5 #(RivaAshWeb.StorybookPropertyTest.render_text_component)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/storybook_property_test.exs:480:5 #(RivaAshWeb.StorybookPropertyTest.render_input_component)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/storybook_property_test.exs:408:5 #(RivaAshWeb.StorybookPropertyTest.assert_security_controls)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/storybook_property_test.exs:317:5 #(RivaAshWeb.StorybookPropertyTest.render_button_component)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       test/riva_ash_web/route_navigation_property_test.exs:623:9 #(RivaAshWeb.RouteNavigationPropertyTest.generate_route_params_from_path)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/payment_live.ex:166:9 #(RivaAshWeb.PaymentLive.reload_payments)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/layout_live.ex:180:9 #(RivaAshWeb.LayoutLive.reload_layouts)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/item_type_live.ex:177:9 #(RivaAshWeb.ItemTypeLive.reload_item_types)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/item_schedule_live.ex:189:9 #(RivaAshWeb.ItemScheduleLive.reload_item_schedules)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/item_position_live.ex:190:9 #(RivaAshWeb.ItemPositionLive.reload_item_positions)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/item_live.ex:146:9 #(RivaAshWeb.ItemLive.reload_items)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/item_hold_live.ex:158:9 #(RivaAshWeb.ItemHoldLive.reload_item_holds)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/auth_helpers.ex:45:14 #(RivaAshWeb.Live.AuthHelpers.get_current_user_from_session)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/auth_helpers.ex:42:14 #(RivaAshWeb.Live.AuthHelpers.get_current_user_from_session)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/controllers/error_json.ex:133:5 #(RivaAshWeb.ErrorJSON.translate_errors)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/token_form.ex:229:72 #(RivaAshWeb.Components.Forms.TokenForm.parse_id)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/token_form.ex:223:46 #(RivaAshWeb.Components.Forms.TokenForm.transform_token_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/section_form.ex:195:72 #(RivaAshWeb.Components.Forms.SectionForm.parse_id)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/section_form.ex:189:54 #(RivaAshWeb.Components.Forms.SectionForm.transform_section_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/section_form.ex:188:40 #(RivaAshWeb.Components.Forms.SectionForm.transform_section_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:383:77 #(RivaAshWeb.Components.Forms.ScheduleForm.parse_integer)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:354:71 #(RivaAshWeb.Components.Forms.ScheduleForm.transform_schedule_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:345:64 #(RivaAshWeb.Components.Forms.ScheduleForm.transform_schedule_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/reservation_form.ex:284:71 #(RivaAshWeb.Components.Forms.ReservationForm.parse_datetime)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/reservation_form.ex:279:42 #(RivaAshWeb.Components.Forms.ReservationForm.transform_reservation_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:494:72 #(RivaAshWeb.Components.Forms.ReservationBookingForm.parse_id)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:487:60 #(RivaAshWeb.Components.Forms.ReservationBookingForm.transform_confirmation_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:448:56 #(RivaAshWeb.Components.Forms.ReservationBookingForm.transform_client_selection_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:402:72 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.parse_id)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:397:77 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.parse_integer)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:377:58 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.transform_recurring_instance_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:376:54 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.transform_recurring_instance_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:375:42 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.transform_recurring_instance_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:373:51 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.transform_recurring_instance_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/plot_form.ex:211:74 #(RivaAshWeb.Components.Forms.PlotForm.parse_number)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/plot_form.ex:206:46 #(RivaAshWeb.Components.Forms.PlotForm.transform_plot_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/plot_form.ex:205:44 #(RivaAshWeb.Components.Forms.PlotForm.transform_plot_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/plot_form.ex:204:51 #(RivaAshWeb.Components.Forms.PlotForm.transform_plot_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/plot_form.ex:203:46 #(RivaAshWeb.Components.Forms.PlotForm.transform_plot_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/plot_form.ex:201:54 #(RivaAshWeb.Components.Forms.PlotForm.transform_plot_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/plot_form.ex:200:40 #(RivaAshWeb.Components.Forms.PlotForm.transform_plot_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:311:31 #(RivaAshWeb.Components.Forms.PaymentForm.payment_method_options)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:294:73 #(RivaAshWeb.Components.Forms.PaymentForm.parse_float)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:289:42 #(RivaAshWeb.Components.Forms.PaymentForm.transform_payment_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:288:57 #(RivaAshWeb.Components.Forms.PaymentForm.transform_payment_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:287:63 #(RivaAshWeb.Components.Forms.PaymentForm.transform_payment_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:286:60 #(RivaAshWeb.Components.Forms.PaymentForm.transform_payment_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:285:56 #(RivaAshWeb.Components.Forms.PaymentForm.transform_payment_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:284:38 #(RivaAshWeb.Components.Forms.PaymentForm.transform_payment_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:283:54 #(RivaAshWeb.Components.Forms.PaymentForm.transform_payment_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:282:56 #(RivaAshWeb.Components.Forms.PaymentForm.transform_payment_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:281:64 #(RivaAshWeb.Components.Forms.PaymentForm.transform_payment_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:280:54 #(RivaAshWeb.Components.Forms.PaymentForm.transform_payment_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/payment_form.ex:279:60 #(RivaAshWeb.Components.Forms.PaymentForm.transform_payment_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/layout_form.ex:262:77 #(RivaAshWeb.Components.Forms.LayoutForm.parse_integer)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/layout_form.ex:257:52 #(RivaAshWeb.Components.Forms.LayoutForm.transform_layout_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/layout_form.ex:256:72 #(RivaAshWeb.Components.Forms.LayoutForm.transform_layout_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/layout_form.ex:255:71 #(RivaAshWeb.Components.Forms.LayoutForm.transform_layout_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/layout_form.ex:254:45 #(RivaAshWeb.Components.Forms.LayoutForm.transform_layout_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/layout_form.ex:253:43 #(RivaAshWeb.Components.Forms.LayoutForm.transform_layout_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/layout_form.ex:252:55 #(RivaAshWeb.Components.Forms.LayoutForm.transform_layout_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/layout_form.ex:251:49 #(RivaAshWeb.Components.Forms.LayoutForm.transform_layout_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/layout_form.ex:250:58 #(RivaAshWeb.Components.Forms.LayoutForm.transform_layout_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/layout_form.ex:248:40 #(RivaAshWeb.Components.Forms.LayoutForm.transform_layout_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:227:73 #(RivaAshWeb.Components.Forms.ItemTypeForm.parse_float)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:222:77 #(RivaAshWeb.Components.Forms.ItemTypeForm.parse_integer)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:217:57 #(RivaAshWeb.Components.Forms.ItemTypeForm.transform_item_type_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:216:53 #(RivaAshWeb.Components.Forms.ItemTypeForm.transform_item_type_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:215:67 #(RivaAshWeb.Components.Forms.ItemTypeForm.transform_item_type_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:214:69 #(RivaAshWeb.Components.Forms.ItemTypeForm.transform_item_type_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:213:64 #(RivaAshWeb.Components.Forms.ItemTypeForm.transform_item_type_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:212:63 #(RivaAshWeb.Components.Forms.ItemTypeForm.transform_item_type_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:211:54 #(RivaAshWeb.Components.Forms.ItemTypeForm.transform_item_type_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:210:40 #(RivaAshWeb.Components.Forms.ItemTypeForm.transform_item_type_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/components/atoms/modal.ex:78:70 #(RivaAshWeb.Components.Atoms.Modal.render_modal)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/validations/consecutive_days.ex:57:76 #(RivaAsh.Validations.ConsecutiveDays.consecutive_date_range?)
┃ [F] → One `Enum.filter/2` is more efficient than `Enum.filter/2 |> Enum.filter/2`
┃       lib/riva_ash/resources/plot.ex:613:5 #(RivaAsh.Resources.Plot.inactive_for_business)
┃ [F] → One `Enum.filter/2` is more efficient than `Enum.filter/2 |> Enum.filter/2`
┃       lib/riva_ash/resources/plot.ex:596:5 #(RivaAsh.Resources.Plot.active_for_business)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       lib/riva_ash/resources/plot.ex:410:5 #(RivaAsh.Resources.Plot.validate_relationships)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       lib/riva_ash/resources/permission.ex:319:7 #(RivaAsh.Resources.Permission.validate_relationships)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/payment.ex:630:34 #(RivaAsh.Resources.Payment.formatted_remaining_balance)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       lib/riva_ash/resources/layout.ex:580:5 #(RivaAsh.Resources.Layout.valid_configuration?)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       lib/riva_ash/resources/layout.ex:518:5 #(RivaAsh.Resources.Layout.validate_relationships)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       lib/riva_ash/resources/item_type.ex:441:5 #(RivaAsh.Resources.ItemType.validate_relationships)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       lib/riva_ash/resources/item_schedule.ex:447:7 #(RivaAsh.Resources.ItemSchedule.validate_relationships)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/item_schedule.ex:372:39 #(RivaAsh.Resources.ItemSchedule.formatted_duration)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/item_schedule.ex:358:7 #(RivaAsh.Resources.ItemSchedule.duration_minutes)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/item_hold.ex:452:33 #(RivaAsh.Resources.ItemHold.formatted_duration)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/item_hold.ex:438:79 #(RivaAsh.Resources.ItemHold.duration_minutes)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/item.ex:708:5 #(RivaAsh.Resources.Item.current_reservation_count)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       lib/riva_ash/resources/item.ex:618:5 #(RivaAsh.Resources.Item.validate_duration_constraints)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/release.ex:226:49 #(RivaAsh.Release.get_last_version)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/recurring_reservations.ex:354:5 #(RivaAsh.RecurringReservations.generate_weekdays_only)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/gdpr/retention_policy.ex:294:5 #(RivaAsh.GDPR.RetentionPolicy.delete_user_consent_records)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:342:30 #(RivaAsh.GDPR.DataSubjectRights.validate_corrections)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:262:5 #(RivaAsh.GDPR.DataSubjectRights.extract_consent_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:232:5 #(RivaAsh.GDPR.DataSubjectRights.extract_business_data)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/date_time_helpers.ex:253:72 #(RivaAsh.DateTimeHelpers.split_datetime_range_by_day_type)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/date_time_helpers.ex:230:72 #(RivaAsh.DateTimeHelpers.spans_weekday_and_weekend?)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/date_time_helpers.ex:160:5 #(RivaAsh.DateTimeHelpers.count_day_types)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/date_time_helpers.ex:137:5 #(RivaAsh.DateTimeHelpers.day_abbrev)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/date_time_helpers.ex:114:5 #(RivaAsh.DateTimeHelpers.day_name)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/database_health.ex:203:5 #(RivaAsh.DatabaseHealth.run_health_checks)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/booking.ex:277:5 #(RivaAsh.Booking.create_reservation)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/booking.ex:259:5 #(RivaAsh.Booking.find_or_create_client)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/booking.ex:235:9 #(RivaAsh.Booking.find_or_create_client)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/booking.ex:203:5 #(RivaAsh.Booking.get_existing_reservations)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/booking.ex:158:5 #(RivaAsh.Booking.confirm_reservation)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/booking.ex:129:5 #(RivaAsh.Booking.get_reservation_with_client)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       lib/riva_ash/authorization.ex:217:5 #(RivaAsh.Authorization.check_business_owner_permission)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/authorization.ex:139:33 #(RivaAsh.Authorization.action_has_permission)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/accounts/rate_limiter.ex:157:5 #(RivaAsh.Accounts.RateLimiter.cleanup_old_entries)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       test/support/property_testing/data_manager.ex:156:11 #(RivaAsh.PropertyTesting.DataManager.create_base_users)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       test/support/factory.ex:137:30 #(RivaAsh.Factory.past_datetime)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       test/support/factory.ex:123:30 #(RivaAsh.Factory.future_datetime)
┃ [F] → Function body is nested too deep (max depth is 2, was 3).
┃       test/support/factory.ex:75:62 #(RivaAsh.Factory.email)
┃ [F] → Function is too complex (cyclomatic complexity is 9, max is 6).
┃       test/riva_ash_web/property_based_browser_example_test.exs:428:8 #(RivaAshWeb.PropertyBasedBrowserExampleTest.navigable_path?)
┃ [F] → Cond statements should contain at least two conditions besides `true`, consider using `if` instead.
┃       test/support/time_helpers.ex:90:5 #(RivaAsh.Test.TimeHelpers.clock_reset)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/property_testing/data_manager.ex:165:5 #(RivaAsh.PropertyTesting.DataManager.create_base_users)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:423:73 #(RivaAsh.Factory.sample_data)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:419:68 #(RivaAsh.Factory.sample_data)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:416:56 #(RivaAsh.Factory.sample_data)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:413:58 #(RivaAsh.Factory.sample_data)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:141:11 #(RivaAsh.Factory.past_datetime)
┃ [F] → Pipe chain should start with a raw value.
┃       test/support/factory.ex:127:11 #(RivaAsh.Factory.future_datetime)
┃ [F] → One `Enum.filter/2` is more efficient than `Enum.filter/2 |> Enum.filter/2`
┃       test/riva_ash_web/route_navigation_property_test.exs:833:5 #(RivaAshWeb.RouteNavigationPropertyTest.get_sample_routes_for_concurrency_testing)
┃ [F] → One `Enum.filter/2` is more efficient than `Enum.filter/2 |> Enum.filter/2`
┃       test/riva_ash_web/route_navigation_property_test.exs:759:7 #(RivaAshWeb.RouteNavigationPropertyTest.get_sample_routes_for_auth_testing)
┃ [F] → One `Enum.filter/2` is more efficient than `Enum.filter/2 |> Enum.filter/2`
┃       test/riva_ash_web/route_navigation_property_test.exs:751:7 #(RivaAshWeb.RouteNavigationPropertyTest.get_sample_routes_for_auth_testing)
┃ [F] → One `Enum.reject/2` is more efficient than `Enum.reject/2 |> Enum.reject/2`
┃       test/riva_ash_web/route_navigation_property_test.exs:373:9 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [F] → One `Enum.filter/2` is more efficient than `Enum.filter/2 |> Enum.filter/2`
┃       test/riva_ash_web/route_navigation_property_test.exs:358:9 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [F] → One `Enum.filter/2` is more efficient than `Enum.filter/2 |> Enum.filter/2`
┃       test/riva_ash_web/route_navigation_property_test.exs:349:9 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [F] → One `Enum.reject/2` is more efficient than `Enum.reject/2 |> Enum.reject/2`
┃       test/riva_ash_web/route_navigation_property_test.exs:299:9 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [F] → One `Enum.filter/2` is more efficient than `Enum.filter/2 |> Enum.filter/2`
┃       test/riva_ash_web/route_navigation_property_test.exs:216:9 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [F] → One `Enum.filter/2` is more efficient than `Enum.filter/2 |> Enum.filter/2`
┃       test/riva_ash_web/route_navigation_property_test.exs:171:9 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [F] → One `Enum.filter/2` is more efficient than `Enum.filter/2 |> Enum.filter/2`
┃       test/riva_ash_web/route_navigation_property_test.exs:126:9 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash/resources/pricing_resource_test.exs:11:60 #(RivaAsh.Resources.PricingResourceTest.create_item_type!)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash/policies/ownership_check_test.exs:16:65 #(RivaAsh.Policies.OwnershipCheckTest.make_reservation_for_owner)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/user_live.ex:133:75 #(RivaAshWeb.UserLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/token_live.ex:635:52 #(RivaAshWeb.TokenLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/section_live.ex:402:75 #(RivaAshWeb.SectionLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/reservation_live.ex:425:75 #(RivaAshWeb.ReservationLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/recurring_reservation_live.ex:121:52 #(RivaAshWeb.RecurringReservationLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:665:56 #(RivaAshWeb.RecurringReservationInstanceLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/pricing_live.ex:108:52 #(RivaAshWeb.PricingLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/plot_live.ex:286:75 #(RivaAshWeb.PlotLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/permission_live.ex:284:52 #(RivaAshWeb.PermissionLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/dev_tools/reactor_visualizer_live.ex:432:77 #(RivaAshWeb.DevTools.ReactorVisualizerLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/dev_tools/policy_visualizer_live.ex:357:58 #(RivaAshWeb.DevTools.PolicyVisualizerLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/dev_tools/performance_dashboard_live.ex:365:77 #(RivaAshWeb.DevTools.PerformanceDashboardLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/dev_tools/business_context_live.ex:395:77 #(RivaAshWeb.DevTools.BusinessContextLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/dev_tools/ash_inspector_live.ex:345:77 #(RivaAshWeb.DevTools.AshInspectorLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/dev_tools/metrics_store.ex:430:35 #(RivaAshWeb.DevTools.MetricsStore.generate_id)
┃ [F] → One `Enum.reject/2` is more efficient than `Enum.reject/2 |> Enum.reject/2`
┃       lib/riva_ash/search/search_service.ex:72:11 #(RivaAsh.Search.SearchService.get_available_countries)
┃ [F] → One `Enum.reject/2` is more efficient than `Enum.reject/2 |> Enum.reject/2`
┃       lib/riva_ash/search/search_service.ex:44:11 #(RivaAsh.Search.SearchService.get_available_cities)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/recurring_reservation.ex:118:7 #(RivaAsh.Resources.RecurringReservation)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/recurring_reservation.ex:100:7 #(RivaAsh.Resources.RecurringReservation)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/pricing.ex:183:7 #(RivaAsh.Resources.Pricing)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/pricing.ex:174:7 #(RivaAsh.Resources.Pricing)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/pricing.ex:140:7 #(RivaAsh.Resources.Pricing)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/pricing.ex:119:7 #(RivaAsh.Resources.Pricing)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/resources/client.ex:597:35 #(RivaAsh.Resources.Client.generate_verification_token)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/permissions/constants.ex:606:5 #(RivaAsh.Permissions.Constants.permission_metadata)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/permissions/constants.ex:405:5 #(RivaAsh.Permissions.Constants.all_permissions)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/gdpr/retention_policy.ex:373:81 #(RivaAsh.GDPR.RetentionPolicy.count_archived_users)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash/gdpr/retention_policy.ex:366:77 #(RivaAsh.GDPR.RetentionPolicy.count_active_users)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/property_generators_test.exs:239:48 #(RivaAsh.StorybookTesting.PropertyGeneratorsTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/property_generators_test.exs:226:57 #(RivaAsh.StorybookTesting.PropertyGeneratorsTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/property_based_browser_example_test.exs:383:78 #(RivaAshWeb.PropertyBasedBrowserExampleTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/property_based_browser_example_test.exs:292:9 #(RivaAshWeb.PropertyBasedBrowserExampleTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/property_based_browser_example_test.exs:271:9 #(RivaAshWeb.PropertyBasedBrowserExampleTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/controllers/swagger_controller_test.exs:13:50 #(RivaAshWeb.SwaggerControllerTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/controllers/mermaid_controller_test.exs:11:50 #(RivaAshWeb.MermaidControllerTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/controllers/auth_controller_csrf_test.exs:54:52 #(RivaAshWeb.AuthControllerCsrfTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/components/ui/textarea_component_test.exs:58:9 #(RivaAshWeb.Components.UI.TextareaComponentTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/components/ui/textarea_component_test.exs:41:9 #(RivaAshWeb.Components.UI.TextareaComponentTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/components/ui/textarea_component_test.exs:23:9 #(RivaAshWeb.Components.UI.TextareaComponentTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash_web/components/interactive/time_slot_picker_test.exs:54:64 #(RivaAshWeb.Components.Interactive.TimeSlotPickerTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash/resources/reservation_test.exs:111:11 #(RivaAsh.Resources.ReservationTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/riva_ash/resources/reservation_test.exs:23:11 #(RivaAsh.Resources.ReservationTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/property_testing_system_test.exs:56:76 #(RivaAsh.PropertyTestingSystemTest)
┃ [F] → Pipe chain should start with a raw value.
┃       test/property_testing_simple_test.exs:64:76 #(PropertyTestingSimpleTest)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/error/not_found_live.ex:89:75 #(RivaAshWeb.Error.NotFoundLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/error/access_denied_live.ex:187:75 #(RivaAshWeb.Error.AccessDeniedLive.get_page_title)
┃ [F] → Pipe chain should start with a raw value.
┃       lib/riva_ash_web/live/dev_tools/dev_tools_home_live.ex:292:77 #(RivaAshWeb.DevTools.DevToolsHomeLive.get_page_title)
┃ [F] → Function is too complex (cyclomatic complexity is 7, max is 6).
┃       test/test_helper.exs:40:5 #()
┃ [F] → Pipe chain should start with a raw value.
┃       config/test_no_sandbox.exs:15:52 #()
┃ [F] → Pipe chain should start with a raw value.
┃       config/test_no_sandbox.exs:14:51 #()
┃ [F] → Pipe chain should start with a raw value.
┃       config/test.exs:68:72 #()
┃ [F] → Pipe chain should start with a raw value.
┃       config/test.exs:67:69 #()
┃ [F] → Pipe chain should start with a raw value.
┃       config/test.exs:31:67 #()
┃ [F] → Pipe chain should start with a raw value.
┃       config/test.exs:19:43 #()
┃ [F] → Pipe chain should start with a raw value.
┃       config/runtime.exs:84:41 #()
┃ [F] → Pipe chain should start with a raw value.
┃       config/runtime.exs:56:50 #()
┃ [F] → Pipe chain should start with a raw value.
┃       config/dev.exs:66:5 #()
┃ [F] → Pipe chain should start with a raw value.
┃       config/dev.exs:15:43 #()
┃ [F] → Pipe chain should start with a raw value.
┃       config/config.exs:11:43 #()
┃ [F] ↘ Avoid `apply/2` and `apply/3` when the number of arguments is known.
┃       test/support/time_helpers.ex:64:9 #(RivaAsh.Test.TimeHelpers.clock_travel)
┃ [F] ↘ Avoid `apply/2` and `apply/3` when the number of arguments is known.
┃       test/support/time_helpers.ex:48:9 #(RivaAsh.Test.TimeHelpers.do_clock_freeze)
┃ [F] ↘ Avoid `apply/2` and `apply/3` when the number of arguments is known.
┃       test/support/time_helpers.ex:92:9 #(RivaAsh.Test.TimeHelpers.clock_reset)

  Warnings - please take a look                                                                                                                                        
┃ 
┃ [W] ↗ There should be no calls to `IO.inspect/1`.
┃       test/riva_ash_web/route_enumeration_test.exs:219:11 #(RivaAshWeb.RouteEnumerationTest.test_single_route)
┃ [W] ↗ Prefer String.to_existing_atom/1 over String.to_atom/1 to avoid creating atoms at runtime.
┃       lib/riva_ash_web/live/business_setup_live.ex:622:53 #(RivaAshWeb.BusinessSetupLive.handle_event)
┃ [W] ↗ Prefer String.to_existing_atom/1 over String.to_atom/1 to avoid creating atoms at runtime.
┃       lib/mix/tasks/routes.check.ex:168:16 #(Mix.Tasks.Routes.Check.test_specific_category)
┃ [W] ↗ Prefer String.to_existing_atom/1 over String.to_atom/1 to avoid creating atoms at runtime.
┃       test/support/property_testing/route_enumerator.ex:210:12 #(RivaAsh.PropertyTesting.RouteEnumerator.extract_resource_name)
┃ [W] ↗ There should be no calls to `IO.inspect/1`.
┃       test/riva_ash_web/route_enumeration_test.exs:315:13 #(RivaAshWeb.RouteEnumerationTest.test_error_routes)
┃ [W] ↗ There should be no calls to `IO.inspect/1`.
┃       test/riva_ash_web/route_enumeration_test.exs:278:13 #(RivaAshWeb.RouteEnumerationTest.test_routes_with_params)
┃ [W] ↗ Prefer :erlang.binary_to_existing_atom/2 over :erlang.binary_to_atom/2 to avoid creating atoms at runtime.
┃       lib/riva_ash_web/live/auth_helpers.ex:262 #(RivaAshWeb.Live.AuthHelpers.resource_key)
┃ [W] ↗ Prefer String.to_existing_atom/1 over String.to_atom/1 to avoid creating atoms at runtime.
┃       lib/riva_ash_web/live/auth_helpers.ex:260:8 #(RivaAshWeb.Live.AuthHelpers.resource_key)
┃ [W] ↗ There should be no calls to `IO.inspect/1`.
┃       lib/riva_ash_web/controllers/auth_controller.ex:176:5 #(RivaAshWeb.AuthController.handle_sign_in_error)
┃ [W] ↗ Prefer String.to_existing_atom/1 over String.to_atom/1 to avoid creating atoms at runtime.
┃       lib/riva_ash_web/components/atoms/text.ex:241:30 #(RivaAshWeb.Components.Atoms.Text.render_text)
┃ [W] ↗ Prefer :erlang.binary_to_existing_atom/2 over :erlang.binary_to_atom/2 to avoid creating atoms at runtime.
┃       lib/riva_ash/resource_helpers.ex:445 #(RivaAsh.ResourceHelpers.build_graphql_config)
┃ [W] ↗ Prefer :erlang.binary_to_existing_atom/2 over :erlang.binary_to_atom/2 to avoid creating atoms at runtime.
┃       lib/riva_ash/resource_helpers.ex:444 #(RivaAsh.ResourceHelpers.build_graphql_config)
┃ [W] ↗ Prefer :erlang.binary_to_existing_atom/2 over :erlang.binary_to_atom/2 to avoid creating atoms at runtime.
┃       lib/riva_ash/resource_helpers.ex:443 #(RivaAsh.ResourceHelpers.build_graphql_config)
┃ [W] ↗ Prefer :erlang.binary_to_existing_atom/2 over :erlang.binary_to_atom/2 to avoid creating atoms at runtime.
┃       lib/riva_ash/resource_helpers.ex:439 #(RivaAsh.ResourceHelpers.build_graphql_config)
┃ [W] ↗ Prefer :erlang.binary_to_existing_atom/2 over :erlang.binary_to_atom/2 to avoid creating atoms at runtime.
┃       lib/riva_ash/resource_helpers.ex:438 #(RivaAsh.ResourceHelpers.build_graphql_config)
┃ [W] ↗ Prefer :erlang.binary_to_existing_atom/2 over :erlang.binary_to_atom/2 to avoid creating atoms at runtime.
┃       lib/riva_ash/resource_helpers.ex:437 #(RivaAsh.ResourceHelpers.build_graphql_config)
┃ [W] ↗ Prefer :erlang.binary_to_existing_atom/2 over :erlang.binary_to_atom/2 to avoid creating atoms at runtime.
┃       lib/riva_ash/resource_helpers.ex:436 #(RivaAsh.ResourceHelpers.build_graphql_config)
┃ [W] ↗ Logger metadata key extra not found in Logger config.
┃       lib/riva_ash/jobs/gdpr_retention_job.ex:314:69 #(RivaAsh.Jobs.GDPRRetentionJob.log_failure_alert)
┃ [W] ↗ Logger metadata key extra not found in Logger config.
┃       lib/riva_ash/jobs/gdpr_retention_job.ex:286:81 #(RivaAsh.Jobs.GDPRRetentionJob.send_compliance_alert)
┃ [W] ↗ Logger metadata key extra not found in Logger config.
┃       lib/riva_ash/jobs/gdpr_retention_job.ex:209 #(RivaAsh.Jobs.GDPRRetentionJob.log_cleanup_failure)
┃ [W] ↗ Logger metadata key extra not found in Logger config.
┃       lib/riva_ash/jobs/gdpr_retention_job.ex:199 #(RivaAsh.Jobs.GDPRRetentionJob.log_successful_cleanup)
┃ [W] ↗ Prefer String.to_existing_atom/1 over String.to_atom/1 to avoid creating atoms at runtime.
┃       lib/riva_ash/authorization.ex:228:13 #(RivaAsh.Authorization.normalize_permission_name)
┃ [W] ↗ Prefer Module.safe_concat/2 over Module.concat/2 to avoid creating atoms at runtime.
┃       test/paper_trail_archival_test.exs:323:24 #(RivaAsh.PaperTrailArchivalTest.get_versions_for_resource)
┃ [W] ↗ Module attribute @token_max_age makes use of unsafe Application configuration call Application.get_env/3
┃       lib/riva_ash_web/live/auth_helpers.ex:22:18 #(RivaAshWeb.Live.AuthHelpers)
┃ [W] ↗ Module attribute @rate_limiter makes use of unsafe Application configuration call Application.get_env/3
┃       lib/riva_ash_web/live/auth/sign_in_live.ex:19:17 #(RivaAshWeb.Auth.SignInLive)
┃ [W] ↗ Module attribute @default_css_class makes use of unsafe Application configuration call Application.get_env/3
┃       lib/riva_ash_web/components/layouts.ex:31:22 #(RivaAshWeb.Layouts)
┃ [W] ↗ Module attribute @default_body_class makes use of unsafe Application configuration call Application.get_env/3
┃       lib/riva_ash_web/components/layouts.ex:30:23 #(RivaAshWeb.Layouts)
┃ [W] ↗ Module attribute @default_app_name makes use of unsafe Application configuration call Application.get_env/3
┃       lib/riva_ash_web/components/layouts.ex:29:21 #(RivaAshWeb.Layouts)
┃ [W] ↗ Logger metadata key extra not found in Logger config.
┃       lib/riva_ash/gdpr/retention_policy.ex:86:54 #(RivaAsh.GDPR.RetentionPolicy.run_retention_cleanup)
┃ [W] ↗ Module attribute @default_consent_method makes use of unsafe Application configuration call Application.get_env/3
┃       lib/riva_ash/gdpr/consent_record.ex:25:27 #(RivaAsh.GDPR.ConsentRecord)
┃ [W] ↗ Module attribute @config makes use of unsafe Application configuration call Application.get_env/3
┃       lib/riva_ash/gdpr/consent_record.ex:24:11 #(RivaAsh.GDPR.ConsentRecord)
┃ [W] → Use `reraise` inside a rescue block to preserve the original stacktrace.
┃       lib/riva_ash_web/live/auth_helpers.ex:204:9 #(RivaAshWeb.Live.AuthHelpers.load_business_scoped_resources)
┃ [W] → Struct %Ash.Error.Forbidden{} found in `@spec`.
┃       lib/riva_ash_web/controllers/fallback_controller.ex:46:31 #(RivaAshWeb.FallbackController)
┃ [W] → Struct %Ash.Error.Invalid{} found in `@spec`.
┃       lib/riva_ash_web/controllers/fallback_controller.ex:33:31 #(RivaAshWeb.FallbackController)
┃ [W] → Struct %Ash.Error.Query.NotFound{} found in `@spec`.
┃       lib/riva_ash_web/controllers/fallback_controller.ex:23:31 #(RivaAshWeb.FallbackController)

  Consistency                                                                                                                                                          
┃ 
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth_helpers.ex:235:16 #(RivaAshWeb.Live.AuthHelpers.mount_business_scoped)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_position.ex:407:16 #(RivaAsh.Resources.ItemPosition.check_position_overlap)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_position.ex:360:16 #(RivaAsh.Resources.ItemPosition.check_layout_bounds)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/mermaid.ex:175:7 #(RivaAsh.Mermaid.build_relationship_line)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/availability.ex:184:16 #(RivaAsh.Availability.check_day_schedule)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_enumeration_test.exs:221:9 #(RivaAshWeb.RouteEnumerationTest.test_single_route)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_enumeration_test.exs:190:11 #(RivaAshWeb.RouteEnumerationTest.test_single_route)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_enumeration_test.exs:178:11 #(RivaAshWeb.RouteEnumerationTest.test_single_route)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/user_live.ex:42:16 #(RivaAshWeb.UserLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/token_live.ex:597:7 #(RivaAshWeb.TokenLive.build_meta)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/token_live.ex:477:8 #(RivaAshWeb.TokenLive.compare_tokens)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/token_live.ex:476:13 #(RivaAshWeb.TokenLive.compare_tokens)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/token_live.ex:75:7 #(RivaAshWeb.TokenLive.handle_params)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/token_live.ex:54:16 #(RivaAshWeb.TokenLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/system_settings_live.ex:42:16 #(RivaAshWeb.SystemSettingsLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/section_live.ex:371:44 #(RivaAshWeb.SectionLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/reservation_live.ex:394:44 #(RivaAshWeb.ReservationLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/reservation_center_live.ex:420:9 #(RivaAshWeb.ReservationCenterLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/reservation_center_live.ex:419:19 #(RivaAshWeb.ReservationCenterLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/reservation_center_live.ex:58:16 #(RivaAshWeb.ReservationCenterLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:604:7 #(RivaAshWeb.RecurringReservationInstanceLive.build_meta)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:483:8 #(RivaAshWeb.RecurringReservationInstanceLive.compare_instances)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:482:13 #(RivaAshWeb.RecurringReservationInstanceLive.compare_instances)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:396:44 #(RivaAshWeb.RecurringReservationInstanceLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:72:7 #(RivaAshWeb.RecurringReservationInstanceLive.handle_params)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:472:7 #(RivaAshWeb.PlotLive.build_meta)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:351:8 #(RivaAshWeb.PlotLive.compare_plots)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:350:13 #(RivaAshWeb.PlotLive.compare_plots)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:221:13 #(RivaAshWeb.PlotLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:65:7 #(RivaAshWeb.PlotLive.handle_params)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/permission_live.ex:30:16 #(RivaAshWeb.PermissionLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/people_management_live.ex:454:9 #(RivaAshWeb.PeopleManagementLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/people_management_live.ex:443:9 #(RivaAshWeb.PeopleManagementLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/people_management_live.ex:424:9 #(RivaAshWeb.PeopleManagementLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/people_management_live.ex:29:16 #(RivaAshWeb.PeopleManagementLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/payment_live.ex:28:16 #(RivaAshWeb.PaymentLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/layout_live.ex:31:16 #(RivaAshWeb.LayoutLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_type_live.ex:28:16 #(RivaAshWeb.ItemTypeLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_schedule_live.ex:28:16 #(RivaAshWeb.ItemScheduleLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_position_live.ex:28:16 #(RivaAshWeb.ItemPositionLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_live.ex:32:16 #(RivaAshWeb.ItemLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_hold_live.ex:28:16 #(RivaAshWeb.ItemHoldLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/inventory_management_live.ex:44:16 #(RivaAshWeb.InventoryManagementLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/financial_operations_live.ex:39:16 #(RivaAshWeb.FinancialOperationsLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/employee_live.ex:55:16 #(RivaAshWeb.EmployeeLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dev_tools/test_data_generator_live.ex:63:11 #(RivaAshWeb.DevTools.TestDataGeneratorLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dev_tools/business_context_live.ex:37:18 #(RivaAshWeb.DevTools.BusinessContextLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dashboard_live.ex:39:16 #(RivaAshWeb.DashboardLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/client_live.ex:39:16 #(RivaAshWeb.ClientLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/business_setup_live.ex:72:16 #(RivaAshWeb.BusinessSetupLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/business_live.ex:39:16 #(RivaAshWeb.BusinessLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/booking_calendar_live.ex:185:9 #(RivaAshWeb.BookingCalendarLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/booking_calendar_live.ex:147:16 #(RivaAshWeb.BookingCalendarLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/booking_calendar_live.ex:45:16 #(RivaAshWeb.BookingCalendarLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/availability_exception_live.ex:36:16 #(RivaAshWeb.AvailabilityExceptionLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth/sign_in_live.ex:187:66 #(RivaAshWeb.Auth.SignInLive.handle_event)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:234:24 #(RivaAshWeb.Components.Molecules.TabNavigation.build_tab_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:234:27 #(RivaAshWeb.Components.Molecules.TabNavigation.build_tab_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:230:31 #(RivaAshWeb.Components.Molecules.TabNavigation.build_tab_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:226:30 #(RivaAshWeb.Components.Molecules.TabNavigation.build_tab_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/time_picker.ex:160:9 #(RivaAshWeb.Components.Atoms.TimePicker.build_input_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/time_picker.ex:153:9 #(RivaAshWeb.Components.Atoms.TimePicker.build_input_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/file_upload.ex:197:9 #(RivaAshWeb.Components.Atoms.FileUpload.build_drop_zone_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/file_upload.ex:190:9 #(RivaAshWeb.Components.Atoms.FileUpload.build_drop_zone_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/date_picker.ex:127:9 #(RivaAshWeb.Components.Atoms.DatePicker.build_input_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/date_picker.ex:120:9 #(RivaAshWeb.Components.Atoms.DatePicker.build_input_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:262:9 #(RivaAshWeb.Components.Atoms.ColorPicker.build_text_input_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:255:9 #(RivaAshWeb.Components.Atoms.ColorPicker.build_text_input_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:239:9 #(RivaAshWeb.Components.Atoms.ColorPicker.build_input_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:232:9 #(RivaAshWeb.Components.Atoms.ColorPicker.build_input_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:334:16 #(RivaAsh.Resources.ItemHold.check_for_overlapping_holds)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:253:52 #(RivaAsh.RecurringReservations.update_instances_status)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/queries.ex:264:20 #(RivaAsh.Queries.find_conflicted_items)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/queries.ex:72:11 #(RivaAsh.Queries.filter_available_items)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions.ex:118:16 #(RivaAsh.Permissions.grant_permission)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:460:16 #(RivaAsh.Permission.PermissionService.has_permission?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:460:20 #(RivaAsh.Permission.PermissionService.has_permission?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:143:15 #(RivaAsh.Permission.PermissionService.add_new_permissions)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/people/people_service.ex:399:7 #(RivaAsh.People.PeopleService.validate_required_field)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/people/people_service.ex:352:9 #(RivaAsh.People.PeopleService.get_person)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/people/people_service.ex:314:26 #(RivaAsh.People.PeopleService.get_person_record)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/people/people_service.ex:314:29 #(RivaAsh.People.PeopleService.get_person_record)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/people/people_service.ex:314:32 #(RivaAsh.People.PeopleService.get_person_record)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/people/people_service.ex:289:9 #(RivaAsh.People.PeopleService.delete_person)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/payment/payment_service.ex:302:7 #(RivaAsh.Payment.PaymentService.validate_required_field)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/availability.ex:428:16 #(RivaAsh.Availability.filter_reservations)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/availability.ex:403:16 #(RivaAsh.Availability.filter_exceptions)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/availability.ex:344:16 #(RivaAsh.Availability.get_scheduled_slots)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/availability.ex:281:16 #(RivaAsh.Availability.check_reservation_conflicts)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/availability.ex:231:16 #(RivaAsh.Availability.check_exceptions)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/availability.ex:141:66 #(RivaAsh.Availability.check_schedule_availability)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/availability.ex:141:69 #(RivaAsh.Availability.check_schedule_availability)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/accounts/rate_limiter.ex:102:7 #(RivaAsh.Accounts.RateLimiter.handle_call)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/time_helpers.ex:75:11 #(RivaAsh.Test.TimeHelpers.clock_travel)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing_config.ex:17:7 #(RivaAsh.PropertyTestingConfig.config)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/state_machine.ex:242:20 #(RivaAsh.PropertyTesting.StateMachine.admin_state?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/state_machine.ex:236:28 #(RivaAsh.PropertyTesting.StateMachine.authenticated_state?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/state_machine.ex:229:20 #(RivaAsh.PropertyTesting.StateMachine.error_state?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/route_enumerator.ex:236:7 #(RivaAsh.PropertyTesting.RouteEnumerator.generate_param_value)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/route_enumerator.ex:212:7 #(RivaAsh.PropertyTesting.RouteEnumerator.extract_resource_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/route_enumerator.ex:161:7 #(RivaAsh.PropertyTesting.RouteEnumerator.has_auth_pipeline?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/flow_generator.ex:248:9 #(RivaAsh.PropertyTesting.FlowGenerator.route_for_state_generator)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/data_manager.ex:382:26 #(RivaAsh.PropertyTesting.DataManager.get_resource_type)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/data_manager.ex:303:7 #(RivaAsh.PropertyTesting.DataManager.delete_employee)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/data_manager.ex:296:7 #(RivaAsh.PropertyTesting.DataManager.delete_item)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/data_manager.ex:289:7 #(RivaAsh.PropertyTesting.DataManager.delete_client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/data_manager.ex:282:7 #(RivaAsh.PropertyTesting.DataManager.delete_business)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/data_manager.ex:275:7 #(RivaAsh.PropertyTesting.DataManager.delete_user)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_helpers.ex:147:13 #(RivaAsh.PropertyHelpers.create_scenario)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_helpers.ex:58:27 #(RivaAsh.PropertyHelpers.has_error_on_field?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_helpers.ex:58:30 #(RivaAsh.PropertyHelpers.has_error_on_field?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_helpers.ex:53:9 #(RivaAsh.PropertyHelpers.has_error_on_field?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/mocks/repo_mock.ex:41:20 #(RivaAsh.Repo.Mock.autogenerate)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/mocks/repo_mock.ex:32:22 #(RivaAsh.Repo.Mock.structure_load)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/mocks/repo_mock.ex:32:25 #(RivaAsh.Repo.Mock.structure_load)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/mocks/repo_mock.ex:31:22 #(RivaAsh.Repo.Mock.structure_dump)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/mocks/repo_mock.ex:31:25 #(RivaAsh.Repo.Mock.structure_dump)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/mocks/repo_mock.ex:22:26 #(RivaAsh.Repo.Mock.ensure_all_started)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/mocks/repo_mock.ex:22:29 #(RivaAsh.Repo.Mock.ensure_all_started)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/liveview_helpers.ex:67:7 #(RivaAsh.Test.LiveViewHelpers.assert_has)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:899:7 #(RivaAshWeb.StorybookPropertyTest.assert_non_empty_text)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:886:7 #(RivaAshWeb.StorybookPropertyTest.assert_disabled_attributes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:615:13 #(RivaAshWeb.StorybookPropertyTest.assert_text_html_tag)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:526:7 #(RivaAshWeb.StorybookPropertyTest.assert_input_attributes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:395:13 #(RivaAshWeb.StorybookPropertyTest.assert_button_attributes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:354:7 #(RivaAshWeb.StorybookPropertyTest.guard_validate_props)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:273:9 #(RivaAshWeb.StorybookPropertyTest.TestShell.apply_component_func_with_error_handling)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:206:13 #(RivaAshWeb.StorybookPropertyTest.TestShell.render_component_with_error_handling)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:180:9 #(RivaAshWeb.StorybookPropertyTest.TestCore.apply_component_func)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:176:13 #(RivaAshWeb.StorybookPropertyTest.TestCore.apply_component_func)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:151:13 #(RivaAshWeb.StorybookPropertyTest.TestCore.measure_performance)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/storybook_property_test.exs:89:9 #(RivaAshWeb.StorybookPropertyTest.TestCore.validate_html_structure)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_navigation_property_test.exs:740:7 #(RivaAshWeb.RouteNavigationPropertyTest.validate_response_content)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_navigation_property_test.exs:686:7 #(RivaAshWeb.RouteNavigationPropertyTest.liveview_route?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_navigation_property_test.exs:655:7 #(RivaAshWeb.RouteNavigationPropertyTest.create_item_safe)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_navigation_property_test.exs:576:7 #(RivaAshWeb.RouteNavigationPropertyTest.authenticated_route?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_enumeration_test.exs:317:11 #(RivaAshWeb.RouteEnumerationTest.test_error_routes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_enumeration_test.exs:280:11 #(RivaAshWeb.RouteEnumerationTest.test_routes_with_params)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:269:22 #(RivaAshWeb.NoDatabaseIntegrationTest.validate_role)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/telemetry.ex:390:23 #(RivaAshWeb.Telemetry.get_actor_role)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/token_live.ex:630:7 #(RivaAshWeb.TokenLive.load_users)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/token_live.ex:627:9 #(RivaAshWeb.TokenLive.load_users)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/token_live.ex:619:7 #(RivaAshWeb.TokenLive.load_tokens_simple)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/token_live.ex:616:9 #(RivaAshWeb.TokenLive.load_tokens_simple)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/token_live.ex:490:7 #(RivaAshWeb.TokenLive.get_token_field_value)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/token_live.ex:457:60 #(RivaAshWeb.TokenLive.apply_sorting)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/superadmin_dashboard_live.ex:28:7 #(RivaAshWeb.SuperadminDashboardLive.mount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_live.ex:153:7 #(RivaAshWeb.RecurringReservationLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_live.ex:151:17 #(RivaAshWeb.RecurringReservationLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_live.ex:144:7 #(RivaAshWeb.RecurringReservationLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_live.ex:129:16 #(RivaAshWeb.RecurringReservationLive.format_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:670:7 #(RivaAshWeb.RecurringReservationInstanceLive.format_error_message)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:660:7 #(RivaAshWeb.RecurringReservationInstanceLive.load_reservations)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:657:9 #(RivaAshWeb.RecurringReservationInstanceLive.load_reservations)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:646:7 #(RivaAshWeb.RecurringReservationInstanceLive.load_recurring_reservations)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:643:9 #(RivaAshWeb.RecurringReservationInstanceLive.load_recurring_reservations)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:632:7 #(RivaAshWeb.RecurringReservationInstanceLive.load_instances_simple)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:629:9 #(RivaAshWeb.RecurringReservationInstanceLive.load_instances_simple)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:497:7 #(RivaAshWeb.RecurringReservationInstanceLive.get_field_value)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/recurring_reservation_instance_live.ex:463:60 #(RivaAshWeb.RecurringReservationInstanceLive.apply_sorting)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/pricing_live.ex:142:7 #(RivaAshWeb.PricingLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/pricing_live.ex:140:17 #(RivaAshWeb.PricingLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/pricing_live.ex:133:7 #(RivaAshWeb.PricingLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:495:7 #(RivaAshWeb.PlotLive.load_plots_simple)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:492:9 #(RivaAshWeb.PlotLive.load_plots_simple)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:365:7 #(RivaAshWeb.PlotLive.get_field_value)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:331:60 #(RivaAshWeb.PlotLive.apply_sorting)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:291:7 #(RivaAshWeb.PlotLive.format_error_message)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:277:18 #(RivaAshWeb.PlotLive.delete_plot)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/plot_live.ex:267:9 #(RivaAshWeb.PlotLive.get_current_user_from_session)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/permission_live.ex:314:7 #(RivaAshWeb.PermissionLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/permission_live.ex:312:17 #(RivaAshWeb.PermissionLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/permission_live.ex:305:7 #(RivaAshWeb.PermissionLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/people_management_live.ex:608:7 #(RivaAshWeb.PeopleManagementLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/people_management_live.ex:606:17 #(RivaAshWeb.PeopleManagementLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/people_management_live.ex:599:7 #(RivaAshWeb.PeopleManagementLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/people_management_live.ex:584:16 #(RivaAshWeb.PeopleManagementLive.format_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/payment_live.ex:217:7 #(RivaAshWeb.PaymentLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/payment_live.ex:215:17 #(RivaAshWeb.PaymentLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/payment_live.ex:208:7 #(RivaAshWeb.PaymentLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/payment_live.ex:193:16 #(RivaAshWeb.PaymentLive.format_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/layout_live.ex:218:7 #(RivaAshWeb.LayoutLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/layout_live.ex:216:17 #(RivaAshWeb.LayoutLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/layout_live.ex:209:7 #(RivaAshWeb.LayoutLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_type_live.ex:215:7 #(RivaAshWeb.ItemTypeLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_type_live.ex:213:17 #(RivaAshWeb.ItemTypeLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_type_live.ex:206:7 #(RivaAshWeb.ItemTypeLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_schedule_live.ex:249:7 #(RivaAshWeb.ItemScheduleLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_schedule_live.ex:247:17 #(RivaAshWeb.ItemScheduleLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_schedule_live.ex:240:7 #(RivaAshWeb.ItemScheduleLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_schedule_live.ex:223:7 #(RivaAshWeb.ItemScheduleLive.format_day_of_week)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_schedule_live.ex:207:16 #(RivaAshWeb.ItemScheduleLive.format_datetime)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_position_live.ex:221:7 #(RivaAshWeb.ItemPositionLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_position_live.ex:219:17 #(RivaAshWeb.ItemPositionLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_position_live.ex:212:7 #(RivaAshWeb.ItemPositionLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_live.ex:195:7 #(RivaAshWeb.ItemLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_live.ex:193:17 #(RivaAshWeb.ItemLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_live.ex:186:7 #(RivaAshWeb.ItemLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_live.ex:169:16 #(RivaAshWeb.ItemLive.format_price)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_hold_live.ex:201:7 #(RivaAshWeb.ItemHoldLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_hold_live.ex:199:17 #(RivaAshWeb.ItemHoldLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_hold_live.ex:192:7 #(RivaAshWeb.ItemHoldLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/item_hold_live.ex:176:16 #(RivaAshWeb.ItemHoldLive.format_datetime)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/global_search_live.ex:205:7 #(RivaAshWeb.GlobalSearchLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/global_search_live.ex:203:17 #(RivaAshWeb.GlobalSearchLive.format_validation_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/global_search_live.ex:196:7 #(RivaAshWeb.GlobalSearchLive.format_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/financial_operations_live.ex:555:23 #(RivaAshWeb.FinancialOperationsLive.status_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/financial_operations_live.ex:546:24 #(RivaAshWeb.FinancialOperationsLive.format_currency)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/employee_live.ex:417:21 #(RivaAshWeb.EmployeeLive.role_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dev_tools/test_data_generator_live.ex:475:9 #(RivaAshWeb.DevTools.TestDataGeneratorLive.generate_template_data)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dev_tools/test_data_generator_live.ex:457:31 #(RivaAshWeb.DevTools.TestDataGeneratorLive.get_template_options)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dev_tools/test_data_generator_live.ex:415:21 #(RivaAshWeb.DevTools.TestDataGeneratorLive.get_domain)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dev_tools/test_data_generator_live.ex:410:9 #(RivaAshWeb.DevTools.TestDataGeneratorLive.count_records)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dev_tools/test_data_generator_live.ex:407:11 #(RivaAshWeb.DevTools.TestDataGeneratorLive.count_records)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dev_tools/performance_dashboard_live.ex:84:11 #(RivaAshWeb.DevTools.PerformanceDashboardLive.handle_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dev_tools/ash_inspector_live.ex:79:11 #(RivaAshWeb.DevTools.AshInspectorLive.handle_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dashboard_live.ex:358:23 #(RivaAshWeb.DashboardLive.status_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/dashboard_live.ex:350:24 #(RivaAshWeb.DashboardLive.format_currency)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/client_live.ex:158:23 #(RivaAshWeb.ClientLive.status_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/business_live.ex:158:23 #(RivaAshWeb.BusinessLive.status_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/booking_calendar_live.ex:298:21 #(RivaAshWeb.BookingCalendarLive.status_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/availability_exception_live.ex:155:23 #(RivaAshWeb.AvailabilityExceptionLive.status_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth_helpers.ex:311:27 #(RivaAshWeb.Live.AuthHelpers.auth_error_message)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth_helpers.ex:294:7 #(RivaAshWeb.Live.AuthHelpers.handle_liveview_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth_helpers.ex:95:7 #(RivaAshWeb.Live.AuthHelpers.handle_ash_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth_helpers.ex:77:47 #(RivaAshWeb.Live.AuthHelpers.handle_ash_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth_helpers.ex:71:49 #(RivaAshWeb.Live.AuthHelpers.handle_ash_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth_helpers.ex:51:9 #(RivaAshWeb.Live.AuthHelpers.get_current_user_from_session)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth/sign_in_live.ex:210:7 #(RivaAshWeb.Auth.SignInLive.get_client_ip)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth/register_live.ex:228:35 #(RivaAshWeb.Auth.RegisterLive.format_registration_errors)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth/register_live.ex:224:7 #(RivaAshWeb.Auth.RegisterLive.format_registration_errors)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/live/auth/register_live.ex:222:30 #(RivaAshWeb.Auth.RegisterLive.format_registration_errors)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/layout_hook.ex:113:7 #(RivaAshWeb.LayoutHook.get_layout)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/ui_demo_controller.ex:189:5 #(RivaAshWeb.UIDemoController.get_component_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/fallback_controller.ex:99:25 #(RivaAshWeb.FallbackController.format_ash_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/error_json.ex:127:25 #(RivaAshWeb.ErrorJSON.format_ash_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/booking_controller.ex:353:16 #(RivaAshWeb.BookingController.parse_datetime)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/booking_controller.ex:344:29 #(RivaAshWeb.BookingController.extract_booking_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/booking_controller.ex:328:28 #(RivaAshWeb.BookingController.extract_client_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/booking_controller.ex:323:7 #(RivaAshWeb.BookingController.extract_client_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/booking_controller.ex:296:19 #(RivaAshWeb.BookingController.parse_hour)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/booking_controller.ex:291:7 #(RivaAshWeb.BookingController.parse_hour)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/booking_controller.ex:278:23 #(RivaAshWeb.BookingController.parse_duration)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/booking_controller.ex:273:7 #(RivaAshWeb.BookingController.parse_duration)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/booking_controller.ex:264:16 #(RivaAshWeb.BookingController.parse_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/auth_helpers.ex:146:22 #(RivaAshWeb.AuthHelpers.validate_user)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/auth_helpers.ex:114:7 #(RivaAshWeb.AuthHelpers.load_user_from_session)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/auth_controller.ex:247:25 #(RivaAshWeb.AuthController.format_ash_error)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/auth_controller.ex:235:7 #(RivaAshWeb.AuthController.format_changeset_errors)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/textarea.ex:133:7 #(RivaAshWeb.Components.UI.Textarea.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/textarea.ex:125:7 #(RivaAshWeb.Components.UI.Textarea.variant_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/textarea.ex:94:7 #(RivaAshWeb.Components.UI.Textarea.build_rows_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/spinner.ex:128:7 #(RivaAshWeb.Components.UI.Spinner.label_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/spinner.ex:117:7 #(RivaAshWeb.Components.UI.Spinner.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/spinner.ex:106:7 #(RivaAshWeb.Components.UI.Spinner.variant_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/spinner.ex:75:9 #(RivaAshWeb.Components.UI.Spinner.build_label_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/spinner.ex:62:7 #(RivaAshWeb.Components.UI.Spinner.build_svg_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/select.ex:116:7 #(RivaAshWeb.Components.UI.Select.variant_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/select.ex:107:7 #(RivaAshWeb.Components.UI.Select.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/input.ex:121:7 #(RivaAshWeb.Components.UI.Input.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/input.ex:112:7 #(RivaAshWeb.Components.UI.Input.variant_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/icon.ex:112:7 #(RivaAshWeb.Components.UI.Icon.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/icon.ex:63:7 #(RivaAshWeb.Components.UI.Icon.build_container_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/icon.ex:51:7 #(RivaAshWeb.Components.UI.Icon.build_svg_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/checkbox.ex:118:7 #(RivaAshWeb.Components.UI.Checkbox.variant_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/checkbox.ex:109:7 #(RivaAshWeb.Components.UI.Checkbox.label_size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/checkbox.ex:101:7 #(RivaAshWeb.Components.UI.Checkbox.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/button.ex:111:7 #(RivaAshWeb.Components.UI.Button.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/button.ex:102:7 #(RivaAshWeb.Components.UI.Button.variant_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/badge.ex:78:7 #(RivaAshWeb.Components.UI.Badge.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/badge.ex:70:7 #(RivaAshWeb.Components.UI.Badge.variant_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/badge.ex:48:7 #(RivaAshWeb.Components.UI.Badge.build_content_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/alert.ex:79:7 #(RivaAshWeb.Components.UI.Alert.variant_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/templates/list_view_template.ex:109:9 #(RivaAshWeb.Components.Templates.ListViewTemplate.build_template_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/templates/form_view_template.ex:91:9 #(RivaAshWeb.Components.Templates.FormViewTemplate.build_template_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/templates/detail_view_template.ex:93:9 #(RivaAshWeb.Components.Templates.DetailViewTemplate.build_template_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/templates/dashboard_template.ex:74:9 #(RivaAshWeb.Components.Templates.DashboardTemplate.build_template_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/templates/calendar_template.ex:113:9 #(RivaAshWeb.Components.Templates.CalendarTemplate.build_template_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/organisms/timeline_view.ex:66:9 #(RivaAshWeb.Components.Organisms.TimelineView.build_timeline_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/organisms/reservation_form.ex:98:9 #(RivaAshWeb.Components.Organisms.ReservationForm.build_form_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/organisms/pricing_form.ex:96:9 #(RivaAshWeb.Components.Organisms.PricingForm.build_form_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/organisms/permission_matrix.ex:76:9 #(RivaAshWeb.Components.Organisms.PermissionMatrix.build_matrix_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/organisms/page_header.ex:276:7 #(RivaAshWeb.Components.Organisms.PageHeader.content_wrapper_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/organisms/page_header.ex:265:9 #(RivaAshWeb.Components.Organisms.PageHeader.header_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/organisms/page_header.ex:149:7 #(RivaAshWeb.Components.Organisms.PageHeader.build_content_wrapper_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/organisms/page_header.ex:130:9 #(RivaAshWeb.Components.Organisms.PageHeader.build_header_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/navigation/search_global.ex:168:7 #(RivaAshWeb.Components.Navigation.SearchGlobal.humanize_type)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/navigation/search_global.ex:155:7 #(RivaAshWeb.Components.Navigation.SearchGlobal.get_result_icon)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/navigation/notification_center.ex:161:7 #(RivaAshWeb.Components.Navigation.NotificationCenter.get_notification_icon)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:273:33 #(RivaAshWeb.Components.Molecules.TabNavigation.build_size_default_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:260:30 #(RivaAshWeb.Components.Molecules.TabNavigation.build_size_text_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:247:30 #(RivaAshWeb.Components.Molecules.TabNavigation.build_size_pill_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:205:30 #(RivaAshWeb.Components.Molecules.TabNavigation.build_size_base_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:192:24 #(RivaAshWeb.Components.Molecules.TabNavigation.build_nav_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:116:22 #(RivaAshWeb.Components.Molecules.TabNavigation.validate_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:110:25 #(RivaAshWeb.Components.Molecules.TabNavigation.validate_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/tab_navigation.ex:90:22 #(RivaAshWeb.Components.Molecules.TabNavigation.validate_tabs)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:244:20 #(RivaAshWeb.Components.Molecules.StatusIndicator.pulse_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:235:7 #(RivaAshWeb.Components.Molecules.StatusIndicator.status_icon)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:222:7 #(RivaAshWeb.Components.Molecules.StatusIndicator.compute_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:162:23 #(RivaAshWeb.Components.Molecules.StatusIndicator.validate_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:157:25 #(RivaAshWeb.Components.Molecules.StatusIndicator.validate_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:146:22 #(RivaAshWeb.Components.Molecules.StatusIndicator.validate_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:140:28 #(RivaAshWeb.Components.Molecules.StatusIndicator.validate_show_pulse)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:136:27 #(RivaAshWeb.Components.Molecules.StatusIndicator.validate_show_icon)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:132:23 #(RivaAshWeb.Components.Molecules.StatusIndicator.validate_label)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/status_indicator.ex:127:24 #(RivaAshWeb.Components.Molecules.StatusIndicator.validate_status)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/search_bar.ex:280:36 #(RivaAshWeb.Components.Molecules.SearchBar.should_show_filters?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/search_bar.ex:277:41 #(RivaAshWeb.Components.Molecules.SearchBar.should_show_clear_button?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/search_bar.ex:276:34 #(RivaAshWeb.Components.Molecules.SearchBar.should_show_clear_button?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/search_bar.ex:275:38 #(RivaAshWeb.Components.Molecules.SearchBar.should_show_clear_button?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/search_bar.ex:190:29 #(RivaAshWeb.Components.Molecules.SearchBar.validate_suggestions)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/search_bar.ex:180:25 #(RivaAshWeb.Components.Molecules.SearchBar.validate_filters)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/search_bar.ex:170:27 #(RivaAshWeb.Components.Molecules.SearchBar.validate_on_search)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/progress_bar.ex:208:23 #(RivaAshWeb.Components.Molecules.ProgressBar.validate_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/progress_bar.ex:204:26 #(RivaAshWeb.Components.Molecules.ProgressBar.validate_animated)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/progress_bar.ex:200:25 #(RivaAshWeb.Components.Molecules.ProgressBar.validate_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/progress_bar.ex:193:22 #(RivaAshWeb.Components.Molecules.ProgressBar.validate_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/progress_bar.ex:187:33 #(RivaAshWeb.Components.Molecules.ProgressBar.validate_show_percentage)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/progress_bar.ex:183:23 #(RivaAshWeb.Components.Molecules.ProgressBar.validate_label)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/progress_bar.ex:178:21 #(RivaAshWeb.Components.Molecules.ProgressBar.validate_max)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/progress_bar.ex:174:23 #(RivaAshWeb.Components.Molecules.ProgressBar.validate_value)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/pagination.ex:180:28 #(RivaAshWeb.Components.Molecules.Pagination.validate_page_sizes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/pagination.ex:170:22 #(RivaAshWeb.Components.Molecules.Pagination.validate_path)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/notification_toast.ex:223:23 #(RivaAshWeb.Components.Molecules.NotificationToast.validate_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/notification_toast.ex:219:28 #(RivaAshWeb.Components.Molecules.NotificationToast.validate_on_dismiss)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/notification_toast.ex:214:26 #(RivaAshWeb.Components.Molecules.NotificationToast.validate_position)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/notification_toast.ex:207:22 #(RivaAshWeb.Components.Molecules.NotificationToast.validate_show)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/notification_toast.ex:203:29 #(RivaAshWeb.Components.Molecules.NotificationToast.validate_dismissible)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/notification_toast.ex:199:26 #(RivaAshWeb.Components.Molecules.NotificationToast.validate_duration)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/notification_toast.ex:195:22 #(RivaAshWeb.Components.Molecules.NotificationToast.validate_type)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/notification_toast.ex:188:25 #(RivaAshWeb.Components.Molecules.NotificationToast.validate_message)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/notification_toast.ex:184:23 #(RivaAshWeb.Components.Molecules.NotificationToast.validate_title)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/form_field.ex:606:23 #(RivaAshWeb.Components.Molecules.FormField.validate_label)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/form_field.ex:523:25 #(RivaAshWeb.Components.Molecules.FormField.validate_options)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/form_field.ex:425:22 #(RivaAshWeb.Components.Molecules.FormField.validate_rows)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/form_field.ex:208:28 #(RivaAshWeb.Components.Molecules.FormField.validate_input_type)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/form_field.ex:198:31 #(RivaAshWeb.Components.Molecules.FormField.validate_icon_position)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/form_field.ex:191:23 #(RivaAshWeb.Components.Molecules.FormField.validate_field)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/filter_panel.ex:205:23 #(RivaAshWeb.Components.Molecules.FilterPanel.validate_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/filter_panel.ex:201:26 #(RivaAshWeb.Components.Molecules.FilterPanel.validate_expanded)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/filter_panel.ex:197:29 #(RivaAshWeb.Components.Molecules.FilterPanel.validate_collapsible)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/filter_panel.ex:193:26 #(RivaAshWeb.Components.Molecules.FilterPanel.validate_on_clear)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/filter_panel.ex:189:26 #(RivaAshWeb.Components.Molecules.FilterPanel.validate_on_apply)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/filter_panel.ex:185:24 #(RivaAshWeb.Components.Molecules.FilterPanel.validate_values)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/filter_panel.ex:173:25 #(RivaAshWeb.Components.Molecules.FilterPanel.validate_filters)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:375:28 #(RivaAshWeb.Components.Molecules.EmptyState.description_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:369:22 #(RivaAshWeb.Components.Molecules.EmptyState.title_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:363:18 #(RivaAshWeb.Components.Molecules.EmptyState.icon_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:353:9 #(RivaAshWeb.Components.Molecules.EmptyState.icon_wrapper_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:342:22 #(RivaAshWeb.Components.Molecules.EmptyState.content_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:336:30 #(RivaAshWeb.Components.Molecules.EmptyState.build_variant_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:297:30 #(RivaAshWeb.Components.Molecules.EmptyState.validate_inline_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:293:29 #(RivaAshWeb.Components.Molecules.EmptyState.validate_inline_icon)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:288:22 #(RivaAshWeb.Components.Molecules.EmptyState.validate_text)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:208:23 #(RivaAshWeb.Components.Molecules.EmptyState.validate_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:204:25 #(RivaAshWeb.Components.Molecules.EmptyState.validate_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:195:22 #(RivaAshWeb.Components.Molecules.EmptyState.validate_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:186:29 #(RivaAshWeb.Components.Molecules.EmptyState.validate_description)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:181:23 #(RivaAshWeb.Components.Molecules.EmptyState.validate_title)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/empty_state.ex:177:22 #(RivaAshWeb.Components.Molecules.EmptyState.validate_icon)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/confirm_dialog.ex:208:22 #(RivaAshWeb.Components.Molecules.ConfirmDialog.validate_show)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/confirm_dialog.ex:204:27 #(RivaAshWeb.Components.Molecules.ConfirmDialog.validate_on_cancel)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/confirm_dialog.ex:200:28 #(RivaAshWeb.Components.Molecules.ConfirmDialog.validate_on_confirm)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/confirm_dialog.ex:196:25 #(RivaAshWeb.Components.Molecules.ConfirmDialog.validate_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/confirm_dialog.ex:190:30 #(RivaAshWeb.Components.Molecules.ConfirmDialog.validate_cancel_label)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/confirm_dialog.ex:186:31 #(RivaAshWeb.Components.Molecules.ConfirmDialog.validate_confirm_label)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/confirm_dialog.ex:182:25 #(RivaAshWeb.Components.Molecules.ConfirmDialog.validate_message)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/confirm_dialog.ex:178:23 #(RivaAshWeb.Components.Molecules.ConfirmDialog.validate_title)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/card.ex:160:25 #(RivaAshWeb.Components.Molecules.Card.validate_padding)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/card.ex:149:25 #(RivaAshWeb.Components.Molecules.Card.validate_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/breadcrumb_nav.ex:159:27 #(RivaAshWeb.Components.Molecules.BreadcrumbNav.validate_home_path)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/breadcrumb_nav.ex:155:27 #(RivaAshWeb.Components.Molecules.BreadcrumbNav.validate_separator)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/breadcrumb_nav.ex:143:23 #(RivaAshWeb.Components.Molecules.BreadcrumbNav.validate_items)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/action_menu.ex:313:24 #(RivaAshWeb.Components.Molecules.ActionMenu.map_legacy_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/action_menu.ex:205:30 #(RivaAshWeb.Components.Molecules.ActionMenu.validate_trigger_icon)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/action_menu.ex:201:31 #(RivaAshWeb.Components.Molecules.ActionMenu.validate_trigger_label)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/action_menu.ex:197:22 #(RivaAshWeb.Components.Molecules.ActionMenu.validate_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/action_menu.ex:188:26 #(RivaAshWeb.Components.Molecules.ActionMenu.validate_position)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/molecules/action_menu.ex:168:25 #(RivaAshWeb.Components.Molecules.ActionMenu.validate_actions)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/layouts.ex:104:7 #(RivaAshWeb.Layouts.get_page_title)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/weekly_calendar.ex:433:7 #(RivaAshWeb.Components.Interactive.WeeklyCalendar.format_week)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/weekly_calendar.ex:268:7 #(RivaAshWeb.Components.Interactive.WeeklyCalendar.validate_time_slot_data)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/weekly_calendar.ex:239:7 #(RivaAshWeb.Components.Interactive.WeeklyCalendar.validate_event_data)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/weekly_calendar.ex:135:16 #(RivaAshWeb.Components.Interactive.WeeklyCalendar.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/weekly_calendar.ex:134:16 #(RivaAshWeb.Components.Interactive.WeeklyCalendar.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/weekly_calendar.ex:133:16 #(RivaAshWeb.Components.Interactive.WeeklyCalendar.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/weekly_calendar.ex:132:16 #(RivaAshWeb.Components.Interactive.WeeklyCalendar.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/weekly_calendar.ex:131:16 #(RivaAshWeb.Components.Interactive.WeeklyCalendar.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/weekly_calendar.ex:130:16 #(RivaAshWeb.Components.Interactive.WeeklyCalendar.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/time_slot_picker.ex:422:7 #(RivaAshWeb.Components.Interactive.TimeSlotPicker.get_slot_display)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/time_slot_picker.ex:153:7 #(RivaAshWeb.Components.Interactive.TimeSlotPicker.validate_slot_data)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/time_slot_picker.ex:128:16 #(RivaAshWeb.Components.Interactive.TimeSlotPicker.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/time_slot_picker.ex:127:16 #(RivaAshWeb.Components.Interactive.TimeSlotPicker.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/time_slot_picker.ex:126:16 #(RivaAshWeb.Components.Interactive.TimeSlotPicker.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/time_slot_picker.ex:125:16 #(RivaAshWeb.Components.Interactive.TimeSlotPicker.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/time_slot_picker.ex:124:16 #(RivaAshWeb.Components.Interactive.TimeSlotPicker.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/recurrence_pattern.ex:421:7 #(RivaAshWeb.Components.Interactive.RecurrencePattern.format_date_for_display)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/recurrence_pattern.ex:116:16 #(RivaAshWeb.Components.Interactive.RecurrencePattern.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/recurrence_pattern.ex:115:16 #(RivaAshWeb.Components.Interactive.RecurrencePattern.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/recurrence_pattern.ex:114:16 #(RivaAshWeb.Components.Interactive.RecurrencePattern.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/plot_layout_designer.ex:293:7 #(RivaAshWeb.Components.Interactive.PlotLayoutDesigner.validate_item_data)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/plot_layout_designer.ex:267:7 #(RivaAshWeb.Components.Interactive.PlotLayoutDesigner.validate_section_data)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/plot_layout_designer.ex:162:16 #(RivaAshWeb.Components.Interactive.PlotLayoutDesigner.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/plot_layout_designer.ex:161:16 #(RivaAshWeb.Components.Interactive.PlotLayoutDesigner.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/plot_layout_designer.ex:160:16 #(RivaAshWeb.Components.Interactive.PlotLayoutDesigner.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/plot_layout_designer.ex:148:16 #(RivaAshWeb.Components.Interactive.PlotLayoutDesigner.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/monthly_calendar.ex:604:7 #(RivaAshWeb.Components.Interactive.MonthlyCalendar.extract_day_number)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/monthly_calendar.ex:603:8 #(RivaAshWeb.Components.Interactive.MonthlyCalendar.extract_day_number)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/monthly_calendar.ex:603:11 #(RivaAshWeb.Components.Interactive.MonthlyCalendar.extract_day_number)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/monthly_calendar.ex:464:7 #(RivaAshWeb.Components.Interactive.MonthlyCalendar.format_month)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/monthly_calendar.ex:376:7 #(RivaAshWeb.Components.Interactive.MonthlyCalendar.get_days_in_month)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/monthly_calendar.ex:344:7 #(RivaAshWeb.Components.Interactive.MonthlyCalendar.generate_calendar_days)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/monthly_calendar.ex:125:16 #(RivaAshWeb.Components.Interactive.MonthlyCalendar.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/monthly_calendar.ex:124:16 #(RivaAshWeb.Components.Interactive.MonthlyCalendar.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/monthly_calendar.ex:123:16 #(RivaAshWeb.Components.Interactive.MonthlyCalendar.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/grid_position_picker.ex:126:16 #(RivaAshWeb.Components.Interactive.GridPositionPicker.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/grid_position_picker.ex:125:16 #(RivaAshWeb.Components.Interactive.GridPositionPicker.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/grid_position_picker.ex:124:16 #(RivaAshWeb.Components.Interactive.GridPositionPicker.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/grid_position_picker.ex:123:16 #(RivaAshWeb.Components.Interactive.GridPositionPicker.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/daily_schedule.ex:296:7 #(RivaAshWeb.Components.Interactive.DailySchedule.format_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/daily_schedule.ex:130:16 #(RivaAshWeb.Components.Interactive.DailySchedule.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/daily_schedule.ex:129:16 #(RivaAshWeb.Components.Interactive.DailySchedule.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/daily_schedule.ex:128:16 #(RivaAshWeb.Components.Interactive.DailySchedule.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/availability_grid.ex:125:16 #(RivaAshWeb.Components.Interactive.AvailabilityGrid.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/availability_grid.ex:124:16 #(RivaAshWeb.Components.Interactive.AvailabilityGrid.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/interactive/availability_grid.ex:123:16 #(RivaAshWeb.Components.Interactive.AvailabilityGrid.validate_assigns)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/token_form.ex:258:38 #(RivaAshWeb.Components.Forms.TokenForm.format_errors)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/token_form.ex:242:23 #(RivaAshWeb.Components.Forms.TokenForm.parse_datetime)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/token_form.ex:238:16 #(RivaAshWeb.Components.Forms.TokenForm.parse_datetime)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/token_form.ex:237:23 #(RivaAshWeb.Components.Forms.TokenForm.parse_datetime)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/token_form.ex:231:17 #(RivaAshWeb.Components.Forms.TokenForm.parse_id)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/token_form.ex:214:33 #(RivaAshWeb.Components.Forms.TokenForm.validate_expiration_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/token_form.ex:209:16 #(RivaAshWeb.Components.Forms.TokenForm.validate_expiration_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/token_form.ex:202:23 #(RivaAshWeb.Components.Forms.TokenForm.validate_expiration_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/token_form.ex:194:7 #(RivaAshWeb.Components.Forms.TokenForm.validate_user_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/token_form.ex:189:34 #(RivaAshWeb.Components.Forms.TokenForm.validate_user_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/token_form.ex:185:7 #(RivaAshWeb.Components.Forms.TokenForm.validate_required_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/section_form.ex:197:17 #(RivaAshWeb.Components.Forms.SectionForm.parse_id)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/section_form.ex:178:7 #(RivaAshWeb.Components.Forms.SectionForm.validate_plot_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/section_form.ex:173:34 #(RivaAshWeb.Components.Forms.SectionForm.validate_plot_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/section_form.ex:169:7 #(RivaAshWeb.Components.Forms.SectionForm.validate_required_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:430:32 #(RivaAshWeb.Components.Forms.ScheduleForm.show_seasonal_schedule?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:426:30 #(RivaAshWeb.Components.Forms.ScheduleForm.show_custom_schedule?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:385:22 #(RivaAshWeb.Components.Forms.ScheduleForm.parse_integer)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:380:19 #(RivaAshWeb.Components.Forms.ScheduleForm.parse_time)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:376:7 #(RivaAshWeb.Components.Forms.ScheduleForm.parse_time)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:368:19 #(RivaAshWeb.Components.Forms.ScheduleForm.parse_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:364:7 #(RivaAshWeb.Components.Forms.ScheduleForm.parse_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:336:22 #(RivaAshWeb.Components.Forms.ScheduleForm.compare_times)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:335:27 #(RivaAshWeb.Components.Forms.ScheduleForm.compare_times)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:333:19 #(RivaAshWeb.Components.Forms.ScheduleForm.parse_time)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:329:7 #(RivaAshWeb.Components.Forms.ScheduleForm.parse_time)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:308:31 #(RivaAshWeb.Components.Forms.ScheduleForm.validate_slot_duration)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:304:7 #(RivaAshWeb.Components.Forms.ScheduleForm.validate_slot_duration)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:287:38 #(RivaAshWeb.Components.Forms.ScheduleForm.validate_min_booking_duration)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:283:7 #(RivaAshWeb.Components.Forms.ScheduleForm.validate_min_booking_duration)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:275:38 #(RivaAshWeb.Components.Forms.ScheduleForm.validate_max_booking_duration)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:271:7 #(RivaAshWeb.Components.Forms.ScheduleForm.validate_max_booking_duration)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:263:38 #(RivaAshWeb.Components.Forms.ScheduleForm.validate_advance_booking_days)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:259:7 #(RivaAshWeb.Components.Forms.ScheduleForm.validate_advance_booking_days)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:241:31 #(RivaAshWeb.Components.Forms.ScheduleForm.validate_schedule_type)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/schedule_form.ex:225:7 #(RivaAshWeb.Components.Forms.ScheduleForm.validate_required_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_form.ex:285:23 #(RivaAshWeb.Components.Forms.ReservationForm.parse_datetime)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_form.ex:266:21 #(RivaAshWeb.Components.Forms.ReservationForm.get_datetime)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_form.ex:259:7 #(RivaAshWeb.Components.Forms.ReservationForm.validate_item_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_form.ex:257:31 #(RivaAshWeb.Components.Forms.ReservationForm.validate_item_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_form.ex:254:34 #(RivaAshWeb.Components.Forms.ReservationForm.validate_item_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_form.ex:250:7 #(RivaAshWeb.Components.Forms.ReservationForm.validate_client_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_form.ex:248:33 #(RivaAshWeb.Components.Forms.ReservationForm.validate_client_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_form.ex:245:36 #(RivaAshWeb.Components.Forms.ReservationForm.validate_client_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_form.ex:223:7 #(RivaAshWeb.Components.Forms.ReservationForm.validate_required_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:537:20 #(RivaAshWeb.Components.Forms.ReservationBookingForm.format_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:528:7 #(RivaAshWeb.Components.Forms.ReservationBookingForm.find_item)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:526:31 #(RivaAshWeb.Components.Forms.ReservationBookingForm.find_item)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:521:7 #(RivaAshWeb.Components.Forms.ReservationBookingForm.get_item_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:520:14 #(RivaAshWeb.Components.Forms.ReservationBookingForm.get_item_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:519:31 #(RivaAshWeb.Components.Forms.ReservationBookingForm.get_item_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:514:7 #(RivaAshWeb.Components.Forms.ReservationBookingForm.get_client_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:513:14 #(RivaAshWeb.Components.Forms.ReservationBookingForm.get_client_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:512:33 #(RivaAshWeb.Components.Forms.ReservationBookingForm.get_client_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:508:19 #(RivaAshWeb.Components.Forms.ReservationBookingForm.parse_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:504:7 #(RivaAshWeb.Components.Forms.ReservationBookingForm.parse_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:496:17 #(RivaAshWeb.Components.Forms.ReservationBookingForm.parse_id)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:439:32 #(RivaAshWeb.Components.Forms.ReservationBookingForm.validate_payment_method)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:425:22 #(RivaAshWeb.Components.Forms.ReservationBookingForm.validate_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:419:7 #(RivaAshWeb.Components.Forms.ReservationBookingForm.validate_item_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:417:32 #(RivaAshWeb.Components.Forms.ReservationBookingForm.validate_item_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:410:7 #(RivaAshWeb.Components.Forms.ReservationBookingForm.validate_client_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:408:34 #(RivaAshWeb.Components.Forms.ReservationBookingForm.validate_client_exists)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:401:7 #(RivaAshWeb.Components.Forms.ReservationBookingForm.validate_required_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/reservation_booking_form.ex:355:7 #(RivaAshWeb.Components.Forms.ReservationBookingForm.validate_booking_step_data)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:416:23 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.parse_datetime)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:412:7 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.parse_datetime)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:404:17 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.parse_id)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:399:22 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.parse_integer)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:394:19 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.parse_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:390:7 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.parse_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:363:30 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.validate_status_field)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:349:33 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.validate_sequence_number)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:345:7 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.validate_sequence_number)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:337:22 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.validate_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/recurring_reservation_instance_form.ex:322:7 #(RivaAshWeb.Components.Forms.RecurringReservationInstanceForm.validate_required_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/plot_form.ex:213:21 #(RivaAshWeb.Components.Forms.PlotForm.parse_number)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/plot_form.ex:178:7 #(RivaAshWeb.Components.Forms.PlotForm.validate_area)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/plot_form.ex:161:7 #(RivaAshWeb.Components.Forms.PlotForm.validate_required_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/payment_form.ex:353:26 #(RivaAshWeb.Components.Forms.PaymentForm.show_cash_fields?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/payment_form.ex:349:35 #(RivaAshWeb.Components.Forms.PaymentForm.show_bank_transfer_fields?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/payment_form.ex:345:33 #(RivaAshWeb.Components.Forms.PaymentForm.show_credit_card_fields?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/payment_form.ex:297:20 #(RivaAshWeb.Components.Forms.PaymentForm.parse_float)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/payment_form.ex:269:7 #(RivaAshWeb.Components.Forms.PaymentForm.validate_cash_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/payment_form.ex:261:7 #(RivaAshWeb.Components.Forms.PaymentForm.validate_bank_transfer_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/payment_form.ex:251:7 #(RivaAshWeb.Components.Forms.PaymentForm.validate_credit_card_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/payment_form.ex:241:7 #(RivaAshWeb.Components.Forms.PaymentForm.validate_payment_method_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/payment_form.ex:230:7 #(RivaAshWeb.Components.Forms.PaymentForm.validate_required_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/layout_form.ex:294:33 #(RivaAshWeb.Components.Forms.LayoutForm.show_grid_configuration?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/layout_form.ex:272:22 #(RivaAshWeb.Components.Forms.LayoutForm.parse_boolean)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/layout_form.ex:264:22 #(RivaAshWeb.Components.Forms.LayoutForm.parse_integer)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/layout_form.ex:223:29 #(RivaAshWeb.Components.Forms.LayoutForm.validate_layout_type)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/layout_form.ex:207:7 #(RivaAshWeb.Components.Forms.LayoutForm.validate_required_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:238:22 #(RivaAshWeb.Components.Forms.ItemTypeForm.parse_boolean)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:230:20 #(RivaAshWeb.Components.Forms.ItemTypeForm.parse_float)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:224:22 #(RivaAshWeb.Components.Forms.ItemTypeForm.parse_integer)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:202:28 #(RivaAshWeb.Components.Forms.ItemTypeForm.validate_price_unit)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:188:23 #(RivaAshWeb.Components.Forms.ItemTypeForm.validate_price)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/forms/item_type_form.ex:173:7 #(RivaAshWeb.Components.Forms.ItemTypeForm.validate_required_fields)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/core_components.ex:67:31 #(RivaAshWeb.CoreComponents.icon)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/business/business_form.ex:499:7 #(RivaAshWeb.Components.Business.BusinessForm.validate_required)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/business/business_form.ex:464:20 #(RivaAshWeb.Components.Business.BusinessForm.has_errors?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/tooltip.ex:75:25 #(RivaAshWeb.Components.Atoms.Tooltip.validate_trigger)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/tooltip.ex:69:26 #(RivaAshWeb.Components.Atoms.Tooltip.validate_position)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/tooltip.ex:62:23 #(RivaAshWeb.Components.Atoms.Tooltip.validate_delay)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/time_picker.ex:113:11 #(RivaAshWeb.Components.Atoms.TimePicker.parse_time)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/time_picker.ex:109:15 #(RivaAshWeb.Components.Atoms.TimePicker.parse_time)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/time_picker.ex:101:16 #(RivaAshWeb.Components.Atoms.TimePicker.parse_time)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/time_picker.ex:89:16 #(RivaAshWeb.Components.Atoms.TimePicker.validate_time_range)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/time_picker.ex:78:29 #(RivaAshWeb.Components.Atoms.TimePicker.validate_time_format)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/time_picker.ex:73:28 #(RivaAshWeb.Components.Atoms.TimePicker.validate_step_value)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/spinner.ex:142:7 #(RivaAshWeb.Components.Atoms.Spinner.label_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/spinner.ex:130:7 #(RivaAshWeb.Components.Atoms.Spinner.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/spinner.ex:118:7 #(RivaAshWeb.Components.Atoms.Spinner.spinner_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/radio.ex:64:7 #(RivaAshWeb.Components.Atoms.Radio.validate_radio_group_attributes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/radio.ex:30:7 #(RivaAshWeb.Components.Atoms.Radio.validate_required_attributes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/progress.ex:210:7 #(RivaAshWeb.Components.Atoms.Progress.stroke_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/progress.ex:134:7 #(RivaAshWeb.Components.Atoms.Progress.color_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/progress.ex:123:7 #(RivaAshWeb.Components.Atoms.Progress.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/progress.ex:113:7 #(RivaAshWeb.Components.Atoms.Progress.base_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/modal.ex:209:30 #(RivaAshWeb.Components.Atoms.Modal.get_modal_action_text)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/modal.ex:201:33 #(RivaAshWeb.Components.Atoms.Modal.build_modal_action_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/modal.ex:169:9 #(RivaAshWeb.Components.Atoms.Modal.build_modal_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/modal.ex:74:25 #(RivaAshWeb.Components.Atoms.Modal.validate_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/modal.ex:67:22 #(RivaAshWeb.Components.Atoms.Modal.validate_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/link.ex:172:7 #(RivaAshWeb.Components.Atoms.Link.underline_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/link.ex:162:7 #(RivaAshWeb.Components.Atoms.Link.weight_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/link.ex:151:7 #(RivaAshWeb.Components.Atoms.Link.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/link.ex:141:7 #(RivaAshWeb.Components.Atoms.Link.base_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/label.ex:136:7 #(RivaAshWeb.Components.Atoms.Label.weight_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/label.ex:125:7 #(RivaAshWeb.Components.Atoms.Label.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/label.ex:115:7 #(RivaAshWeb.Components.Atoms.Label.base_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/input.ex:164:7 #(RivaAshWeb.Components.Atoms.Input.map_legacy_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/image.ex:162:7 #(RivaAshWeb.Components.Atoms.Image.fit_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/image.ex:150:7 #(RivaAshWeb.Components.Atoms.Image.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/image.ex:138:7 #(RivaAshWeb.Components.Atoms.Image.base_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/icon.ex:156:7 #(RivaAshWeb.Components.Atoms.Icon.render_icon_path)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/icon.ex:108:7 #(RivaAshWeb.Components.Atoms.Icon.variant_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/icon.ex:97:7 #(RivaAshWeb.Components.Atoms.Icon.size_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/file_upload.ex:251:28 #(RivaAshWeb.Components.Atoms.FileUpload.render_file_preview)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/file_upload.ex:251:31 #(RivaAshWeb.Components.Atoms.FileUpload.render_file_preview)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/file_upload.ex:95:18 #(RivaAshWeb.Components.Atoms.FileUpload.validate_accept_types)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/file_upload.ex:88:31 #(RivaAshWeb.Components.Atoms.FileUpload.validate_max_file_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/file_upload.ex:84:27 #(RivaAshWeb.Components.Atoms.FileUpload.validate_max_files)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/divider.ex:151:7 #(RivaAshWeb.Components.Atoms.Divider.divider_border_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/divider.ex:123:7 #(RivaAshWeb.Components.Atoms.Divider.color_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/divider.ex:110:7 #(RivaAshWeb.Components.Atoms.Divider.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/divider.ex:100:7 #(RivaAshWeb.Components.Atoms.Divider.base_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/date_picker.ex:81:16 #(RivaAshWeb.Components.Atoms.DatePicker.validate_date_range)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/date_picker.ex:72:29 #(RivaAshWeb.Components.Atoms.DatePicker.validate_date_format)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/container.ex:115:7 #(RivaAshWeb.Components.Atoms.Container.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:186:24 #(RivaAshWeb.Components.Atoms.ColorPicker.parse_hsl_parts)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:182:7 #(RivaAshWeb.Components.Atoms.ColorPicker.parse_hsl_parts)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:170:27 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_hsl_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:165:7 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_hsl_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:162:20 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_hsl_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:152:24 #(RivaAshWeb.Components.Atoms.ColorPicker.parse_rgb_parts)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:148:7 #(RivaAshWeb.Components.Atoms.ColorPicker.parse_rgb_parts)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:136:27 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_rgb_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:131:7 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_rgb_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:128:20 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_rgb_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:118:27 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_hex_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:114:7 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_hex_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:113:8 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_hex_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:88:18 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_disabled_colors)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:87:15 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_disabled_colors)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:79:16 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_default_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:78:13 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_default_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/color_picker.ex:73:30 #(RivaAshWeb.Components.Atoms.ColorPicker.validate_color_format)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/card.ex:138:7 #(RivaAshWeb.Components.Atoms.Card.padding_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/card.ex:127:7 #(RivaAshWeb.Components.Atoms.Card.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/card.ex:116:7 #(RivaAshWeb.Components.Atoms.Card.base_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/button.ex:133:7 #(RivaAshWeb.Components.Atoms.Button.legacy_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/button.ex:123:7 #(RivaAshWeb.Components.Atoms.Button.map_variant)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/badge.ex:108:7 #(RivaAshWeb.Components.Atoms.Badge.map_legacy_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/avatar.ex:156:7 #(RivaAshWeb.Components.Atoms.Avatar.icon_size)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/avatar.ex:143:7 #(RivaAshWeb.Components.Atoms.Avatar.status_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/avatar.ex:132:7 #(RivaAshWeb.Components.Atoms.Avatar.status_position)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/avatar.ex:103:7 #(RivaAshWeb.Components.Atoms.Avatar.shape_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/avatar.ex:93:7 #(RivaAshWeb.Components.Atoms.Avatar.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/alert.ex:150:7 #(RivaAshWeb.Components.Atoms.Alert.close_button_color)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/alert.ex:120:7 #(RivaAshWeb.Components.Atoms.Alert.color_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/alert.ex:109:7 #(RivaAshWeb.Components.Atoms.Alert.size_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/alert.ex:99:7 #(RivaAshWeb.Components.Atoms.Alert.base_classes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atomic_components.ex:82:9 #(RivaAshWeb.Components.AtomicComponents.validate_opts!)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations/consecutive_days.ex:51:7 #(RivaAsh.Validations.ConsecutiveDays.consecutive_days?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:1232:16 #(RivaAsh.Validations.check_single_active_base_pricing)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:1152:16 #(RivaAsh.Validations.check_pricing_date_overlap)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:1093:16 #(RivaAsh.Validations.check_employee_granter_business_match)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:1060:16 #(RivaAsh.Validations.check_reservation_payment_business_match)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:1008:16 #(RivaAsh.Validations.check_item_layout_business_match)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:975:16 #(RivaAsh.Validations.check_employee_item_business_match)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:926:16 #(RivaAsh.Validations.check_client_item_business_match)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:893:16 #(RivaAsh.Validations.check_plot_business_match)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:857:16 #(RivaAsh.Validations.check_item_type_business_match)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:821:16 #(RivaAsh.Validations.check_section_business_match)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:747:13 #(RivaAsh.Validations.sanitize_text_input)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:714:13 #(RivaAsh.Validations.validate_phone_format)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:680:13 #(RivaAsh.Validations.validate_email_format)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:637:13 #(RivaAsh.Validations.validate_future_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:411:16 #(RivaAsh.Validations.check_schedule_and_exceptions)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:380:35 #(RivaAsh.Validations.validate_item_not_archived)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:371:32 #(RivaAsh.Validations.validate_item_is_active)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:323:16 #(RivaAsh.Validations.check_item_availability)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:322:16 #(RivaAsh.Validations.check_item_availability)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:185:37 #(RivaAsh.Validations.validate_include_provisional)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:154:7 #(RivaAsh.Validations.get_exclude_statuses)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:62:7 #(RivaAsh.Validations.get_required_attribute)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/storybook_testing/property_generators.ex:277:7 #(RivaAsh.StorybookTesting.PropertyGenerators.edge_case_props)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/storybook_testing/property_generators.ex:211:7 #(RivaAsh.StorybookTesting.PropertyGenerators.component_test_case)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/schedule/schedule_service.ex:261:7 #(RivaAsh.Schedule.ScheduleService.validate_deactivation)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/schedule/schedule_service.ex:252:7 #(RivaAsh.Schedule.ScheduleService.validate_activation)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/schedule/schedule_service.ex:226:7 #(RivaAsh.Schedule.ScheduleService.validate_schedule_params)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/schedule/schedule_service.ex:222:17 #(RivaAsh.Schedule.ScheduleService.validate_schedule_params)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/schedule/schedule_service.ex:206:11 #(RivaAsh.Schedule.ScheduleService.validate_schedule_times)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/schedule/schedule_service.ex:54:9 #(RivaAsh.Schedule.ScheduleService.get_schedule)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/reservation.ex:654:7 #(RivaAsh.Resources.Reservation.reservation_display_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/plot.ex:577:7 #(RivaAsh.Resources.Plot.formatted_coordinates)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/plot.ex:573:11 #(RivaAsh.Resources.Plot.formatted_coordinates)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/plot.ex:432:7 #(RivaAsh.Resources.Plot.business_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/plot.ex:382:7 #(RivaAsh.Resources.Plot.layout_count)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/plot.ex:352:7 #(RivaAsh.Resources.Plot.section_count)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/plot.ex:333:7 #(RivaAsh.Resources.Plot.formatted_address)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/plot.ex:289:7 #(RivaAsh.Resources.Plot.area_unit_description)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/plot.ex:249:7 #(RivaAsh.Resources.Plot.active?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/permission.ex:302:9 #(RivaAsh.Resources.Permission.assigned_employee_names)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/permission.ex:297:15 #(RivaAsh.Resources.Permission.assigned_employee_names)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/permission.ex:259:9 #(RivaAsh.Resources.Permission.employee_count)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/permission.ex:220:9 #(RivaAsh.Resources.Permission.category_description)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/permission.ex:187:9 #(RivaAsh.Resources.Permission.active?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/payment.ex:783:9 #(RivaAsh.Resources.Payment.can_refund?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/payment.ex:724:9 #(RivaAsh.Resources.Payment.business_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/payment.ex:706:9 #(RivaAsh.Resources.Payment.reservation_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/payment.ex:567:9 #(RivaAsh.Resources.Payment.payment_method_description)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/payment.ex:547:9 #(RivaAsh.Resources.Payment.status_description)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/payment.ex:513:9 #(RivaAsh.Resources.Payment.overdue?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/payment.ex:482:9 #(RivaAsh.Resources.Payment.fully_paid?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/payment.ex:464:9 #(RivaAsh.Resources.Payment.active?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/layout.ex:605:7 #(RivaAsh.Resources.Layout.business_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/layout.ex:540:7 #(RivaAsh.Resources.Layout.plot_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/layout.ex:476:7 #(RivaAsh.Resources.Layout.has_valid_background_color?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/layout.ex:428:9 #(RivaAsh.Resources.Layout.grid_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/layout.ex:425:10 #(RivaAsh.Resources.Layout.grid_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/layout.ex:422:16 #(RivaAsh.Resources.Layout.grid_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/layout.ex:340:7 #(RivaAsh.Resources.Layout.layout_type_description)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/layout.ex:321:7 #(RivaAsh.Resources.Layout.active?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_type.ex:487:7 #(RivaAsh.Resources.ItemType.business_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_type.ex:373:7 #(RivaAsh.Resources.ItemType.icon_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_type.ex:354:7 #(RivaAsh.Resources.ItemType.color_info)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_type.ex:311:7 #(RivaAsh.Resources.ItemType.has_valid_color?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_type.ex:293:7 #(RivaAsh.Resources.ItemType.active?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_schedule.ex:544:17 #(RivaAsh.Resources.ItemSchedule.next_occurrence)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_schedule.ex:541:13 #(RivaAsh.Resources.ItemSchedule.next_occurrence)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_schedule.ex:538:17 #(RivaAsh.Resources.ItemSchedule.next_occurrence)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_schedule.ex:469:9 #(RivaAsh.Resources.ItemSchedule.item_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_schedule.ex:305:9 #(RivaAsh.Resources.ItemSchedule.day_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_schedule.ex:270:9 #(RivaAsh.Resources.ItemSchedule.active?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_position.ex:696:7 #(RivaAsh.Resources.ItemPosition.total_area)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_position.ex:653:7 #(RivaAsh.Resources.ItemPosition.layout_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_position.ex:636:7 #(RivaAsh.Resources.ItemPosition.item_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_position.ex:428:7 #(RivaAsh.Resources.ItemPosition.active?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:631:7 #(RivaAsh.Resources.ItemHold.display_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:579:7 #(RivaAsh.Resources.ItemHold.max_extension_minutes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:577:11 #(RivaAsh.Resources.ItemHold.max_extension_minutes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:558:7 #(RivaAsh.Resources.ItemHold.can_extend?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:556:11 #(RivaAsh.Resources.ItemHold.can_extend?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:422:16 #(RivaAsh.Resources.ItemHold.formatted_remaining_time)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:419:13 #(RivaAsh.Resources.ItemHold.formatted_remaining_time)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:379:7 #(RivaAsh.Resources.ItemHold.expired?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:377:11 #(RivaAsh.Resources.ItemHold.expired?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:358:7 #(RivaAsh.Resources.ItemHold.active?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_hold.ex:356:11 #(RivaAsh.Resources.ItemHold.active?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item.ex:668:7 #(RivaAsh.Resources.Item.public_description)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item.ex:531:7 #(RivaAsh.Resources.Item.display_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item.ex:512:7 #(RivaAsh.Resources.Item.available_now?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item.ex:484:7 #(RivaAsh.Resources.Item.active?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/employee_permission.ex:333:9 #(RivaAsh.Resources.EmployeePermission.granted_recently?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/employee_permission.ex:312:9 #(RivaAsh.Resources.EmployeePermission.days_since_granted)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/employee_permission.ex:258:9 #(RivaAsh.Resources.EmployeePermission.granter_display_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/employee_permission.ex:232:9 #(RivaAsh.Resources.EmployeePermission.employee_display_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/employee_permission.ex:207:9 #(RivaAsh.Resources.EmployeePermission.permission_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/employee_permission.ex:190:9 #(RivaAsh.Resources.EmployeePermission.active?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:575:7 #(RivaAsh.Resources.Client.display_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/business.ex:409:7 #(RivaAsh.Resources.Business.search_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/business.ex:342:17 #(RivaAsh.Resources.Business.get_owner)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resource_helpers.ex:197:43 #(RivaAsh.ResourceHelpers.validate_create_version_on_destroy)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resource_helpers.ex:190:35 #(RivaAsh.ResourceHelpers.validate_ignore_attributes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resource_helpers.ex:121:26 #(RivaAsh.ResourceHelpers.validate_required)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resource_helpers.ex:53:29 #(RivaAsh.ResourceHelpers.validate_description)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resource_helpers.ex:46:28 #(RivaAsh.ResourceHelpers.validate_max_length)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resource_helpers.ex:39:28 #(RivaAsh.ResourceHelpers.validate_min_length)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/repo.ex:192:8 #(RivaAsh.Repo.parse_version_string)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/release.ex:304:51 #(RivaAsh.Release.log_rollback_results)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/release.ex:303:52 #(RivaAsh.Release.log_rollback_results)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/release.ex:276:51 #(RivaAsh.Release.log_migration_results)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/release.ex:275:52 #(RivaAsh.Release.log_migration_results)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/release.ex:231:16 #(RivaAsh.Release.get_last_version)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:595:7 #(RivaAsh.RecurringReservations.format_error_message)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:433:20 #(RivaAsh.RecurringReservations.validate_id)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:426:22 #(RivaAsh.RecurringReservations.validate_time)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:388:52 #(RivaAsh.RecurringReservations.create_instances_for_dates)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:320:30 #(RivaAsh.RecurringReservations.validate_pattern_type)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:307:34 #(RivaAsh.RecurringReservations.validate_consecutive_days)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:300:22 #(RivaAsh.RecurringReservations.validate_date)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:228:16 #(RivaAsh.RecurringReservations.cancel_pending_instances)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:217:39 #(RivaAsh.RecurringReservations.process_instances_batch)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:212:36 #(RivaAsh.RecurringReservations.process_instances_batch)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/recurring_reservations.ex:121:16 #(RivaAsh.RecurringReservations.cancel_recurring_reservation)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/reactors/reservation_reactor.ex:99:16 #(RivaAsh.Reactors.ReservationReactor.fetch_client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/queries.ex:476:7 #(RivaAsh.Queries.calculate_period_dates)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/queries.ex:349:16 #(RivaAsh.Queries.get_reservation_count)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/position/position_service.ex:258:7 #(RivaAsh.Position.PositionService.validate_deactivation)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/position/position_service.ex:250:7 #(RivaAsh.Position.PositionService.validate_activation)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/position/position_service.ex:224:7 #(RivaAsh.Position.PositionService.validate_position_params)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/position/position_service.ex:54:9 #(RivaAsh.Position.PositionService.get_position)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/policies/authorization_context.ex:42:7 #(RivaAsh.Policies.AuthorizationContext.from_context)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions/constants.ex:1033:34 #(RivaAsh.Permissions.Constants.permission_requires_audit?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions/constants.ex:1010:29 #(RivaAsh.Permissions.Constants.permission_sensitive?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions/constants.ex:987:32 #(RivaAsh.Permissions.Constants.permissions_for_category)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions/constants.ex:967:28 #(RivaAsh.Permissions.Constants.validate_permissions)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions/constants.ex:963:18 #(RivaAsh.Permissions.Constants.validate_permissions)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions/constants.ex:590:25 #(RivaAsh.Permissions.Constants.valid_permission?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions/constants.ex:569:31 #(RivaAsh.Permissions.Constants.category_for_permission)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions/constants.ex:134:32 #(RivaAsh.Permissions.Constants.valid_permission_format?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions.ex:165:13 #(RivaAsh.Permissions.destroy_permission_assignment)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions.ex:68:16 #(RivaAsh.Permissions.has_permission?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permissions.ex:52:18 #(RivaAsh.Permissions.has_permission?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:380:16 #(RivaAsh.Permission.PermissionService.name_taken?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:380:20 #(RivaAsh.Permission.PermissionService.name_taken?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:364:37 #(RivaAsh.Permission.PermissionService.validate_description)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:360:32 #(RivaAsh.Permission.PermissionService.validate_action)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:357:32 #(RivaAsh.Permission.PermissionService.validate_module)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:354:37 #(RivaAsh.Permission.PermissionService.validate_business_id)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:351:30 #(RivaAsh.Permission.PermissionService.validate_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:275:23 #(RivaAsh.Permission.PermissionService.delete_employee)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:226:23 #(RivaAsh.Permission.PermissionService.delete_permission)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/permission/permission_service.ex:126:15 #(RivaAsh.Permission.PermissionService.remove_existing_permissions)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/people/people_service.ex:423:7 #(RivaAsh.People.PeopleService.validate_optional_phone)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/people/people_service.ex:413:7 #(RivaAsh.People.PeopleService.validate_optional_email)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/payment/payment_service.ex:335:7 #(RivaAsh.Payment.PaymentService.validate_status)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/payment/payment_service.ex:325:7 #(RivaAsh.Payment.PaymentService.validate_currency)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/payment/payment_service.ex:315:7 #(RivaAsh.Payment.PaymentService.validate_amount)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/mermaid.ex:145:7 #(RivaAsh.Mermaid.format_destination_resource)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/mermaid.ex:97:31 #(RivaAsh.Mermaid.extract_attribute_type)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/mermaid.ex:96:36 #(RivaAsh.Mermaid.extract_attribute_type)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/mermaid.ex:30:18 #(RivaAsh.Mermaid.process_resources_to_mermaid)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/layout/layout_service.ex:287:16 #(RivaAsh.Layout.LayoutService.name_taken?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/layout/layout_service.ex:287:20 #(RivaAsh.Layout.LayoutService.name_taken?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/layout/layout_service.ex:271:37 #(RivaAsh.Layout.LayoutService.validate_description)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/layout/layout_service.ex:267:32 #(RivaAsh.Layout.LayoutService.validate_height)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/layout/layout_service.ex:263:31 #(RivaAsh.Layout.LayoutService.validate_width)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/layout/layout_service.ex:259:37 #(RivaAsh.Layout.LayoutService.validate_business_id)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/layout/layout_service.ex:256:30 #(RivaAsh.Layout.LayoutService.validate_name)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/item_type/type_service.ex:297:16 #(RivaAsh.ItemType.TypeService.name_taken?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/item_type/type_service.ex:297:20 #(RivaAsh.ItemType.TypeService.name_taken?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/item_type/type_service.ex:271:9 #(RivaAsh.ItemType.TypeService.validate_type_attrs)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/item_type/type_service.ex:258:9 #(RivaAsh.ItemType.TypeService.validate_type_attrs)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/item_type/type_service.ex:248:9 #(RivaAsh.ItemType.TypeService.validate_type_attrs)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/item/item_service.ex:211:7 #(RivaAsh.Item.ItemService.validate_item_params)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/item/item_service.ex:49:9 #(RivaAsh.Item.ItemService.get_item)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/hold/hold_service.ex:203:7 #(RivaAsh.Hold.HoldService.validate_update)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/hold/hold_service.ex:194:7 #(RivaAsh.Hold.HoldService.validate_hold_params)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/hold/hold_service.ex:183:7 #(RivaAsh.Hold.HoldService.validate_deletion)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/hold/hold_service.ex:176:7 #(RivaAsh.Hold.HoldService.validate_cancellation)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/hold/hold_service.ex:163:9 #(RivaAsh.Hold.HoldService.get_hold_for_user)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/gdpr/retention_policy.ex:305:5 #(RivaAsh.GDPR.RetentionPolicy.delete_user_consent_records)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:271:5 #(RivaAsh.GDPR.DataSubjectRights.extract_consent_data)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:241:5 #(RivaAsh.GDPR.DataSubjectRights.extract_business_data)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:201:16 #(RivaAsh.GDPR.DataSubjectRights.get_user)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:150:16 #(RivaAsh.GDPR.DataSubjectRights.object_to_processing)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:114:16 #(RivaAsh.GDPR.DataSubjectRights.restrict_data_processing)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/gdpr/data_subject_rights.ex:81:16 #(RivaAsh.GDPR.DataSubjectRights.request_data_deletion)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/database_health.ex:266:7 #(RivaAsh.DatabaseHealth.parse_postgres_version)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/database_health.ex:263:8 #(RivaAsh.DatabaseHealth.parse_postgres_version)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/database_health.ex:260:8 #(RivaAsh.DatabaseHealth.parse_postgres_version)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/changes.ex:108:16 #(RivaAsh.Changes.apply_business_id_from_reservation)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/changes.ex:82:16 #(RivaAsh.Changes.apply_business_id_from_employee)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/changes.ex:56:16 #(RivaAsh.Changes.apply_business_id_from_client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/changes.ex:30:16 #(RivaAsh.Changes.apply_business_id_from_item)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/availability.ex:119:29 #(RivaAsh.Availability.validate_item_active)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/availability.ex:113:16 #(RivaAsh.Availability.get_item)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:261:16 #(RivaAsh.Authorization.user_owns_any_business?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:244:7 #(RivaAsh.Authorization.check_explicit_business_owner_permission)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:186:7 #(RivaAsh.Authorization.check_user_permission)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:178:30 #(RivaAsh.Authorization.has_business_in_list?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:178:33 #(RivaAsh.Authorization.has_business_in_list?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:171:34 #(RivaAsh.Authorization.current_business_matches?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:171:37 #(RivaAsh.Authorization.current_business_matches?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:167:22 #(RivaAsh.Authorization.regular_user?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:163:20 #(RivaAsh.Authorization.admin_user?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:89:16 #(RivaAsh.Authorization.check_business_ownership)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:80:7 #(RivaAsh.Authorization.owns_business?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:56:7 #(RivaAsh.Authorization.can_access_business?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/authorization.ex:30:7 #(RivaAsh.Authorization.has_permission)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/mix/tasks/routes.check.ex:128:7 #(Mix.Tasks.Routes.Check.has_auth_pipeline?)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/mix/tasks/routes.check.ex:112:9 #(Mix.Tasks.Routes.Check.filter_live_routes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/mix/tasks/routes.check.ex:29:12 #(Mix.Tasks.Routes.Check.run)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/mix/tasks/routes.check.ex:29:15 #(Mix.Tasks.Routes.Check.run)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/mix/tasks/erd.ex:31:14 #(Mix.Tasks.Erd.run)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/time_helpers.ex:132:7 #(RivaAsh.Test.TimeHelpers.now)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/data_manager.ex:161:13 #(RivaAsh.PropertyTesting.DataManager.create_base_users)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/property_testing/data_manager.ex:154:18 #(RivaAsh.PropertyTesting.DataManager.create_base_users)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/data_case.ex:73:47 #(RivaAsh.DataCase.errors_on)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/support/data_case.ex:57:7 #(RivaAsh.DataCase.setup_sandbox)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_navigation_property_test.exs:373:34 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_navigation_property_test.exs:372:34 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_navigation_property_test.exs:299:34 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_navigation_property_test.exs:298:34 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_navigation_property_test.exs:48:9 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/route_navigation_property_test.exs:30:9 #(RivaAshWeb.RouteNavigationPropertyTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:211:23 #(RivaAshWeb.NoDatabaseIntegrationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:210:23 #(RivaAshWeb.NoDatabaseIntegrationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:209:23 #(RivaAshWeb.NoDatabaseIntegrationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:199:23 #(RivaAshWeb.NoDatabaseIntegrationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:198:23 #(RivaAshWeb.NoDatabaseIntegrationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:197:23 #(RivaAshWeb.NoDatabaseIntegrationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:196:23 #(RivaAshWeb.NoDatabaseIntegrationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:185:23 #(RivaAshWeb.NoDatabaseIntegrationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:168:23 #(RivaAshWeb.NoDatabaseIntegrationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/integration/no_db_integration_test.exs:167:23 #(RivaAshWeb.NoDatabaseIntegrationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/telemetry.ex:411:7 #(RivaAshWeb.Telemetry.normalize_run_queue_metrics)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/telemetry.ex:398:7 #(RivaAshWeb.Telemetry.normalize_memory_metrics)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/telemetry.ex:271:7 #(RivaAshWeb.Telemetry.count_reservations)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/telemetry.ex:268:9 #(RivaAshWeb.Telemetry.count_reservations)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/telemetry.ex:259:7 #(RivaAshWeb.Telemetry.count_businesses)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/telemetry.ex:256:9 #(RivaAshWeb.Telemetry.count_businesses)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/telemetry.ex:248:5 #(RivaAshWeb.Telemetry.get_active_connections)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/mermaid_controller.ex:380:7 #(RivaAshWeb.MermaidController.generate_diagram_files)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/mermaid_controller.ex:372:7 #(RivaAshWeb.MermaidController.generate_mermaid_diagram)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/mermaid_controller.ex:367:16 #(RivaAshWeb.MermaidController.generate_mermaid_diagram)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/controllers/health_controller.ex:118:14 #(RivaAshWeb.HealthController.get_memory_usage)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/ui/card.ex:44:7 #(RivaAshWeb.Components.UI.Card.build_content_class)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/layouts.ex:180:5 #(RivaAshWeb.Layouts)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/toggle.ex:30:8 #(RivaAshWeb.Components.Atoms.Toggle.validate_toggle_attributes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/toggle.ex:30:11 #(RivaAshWeb.Components.Atoms.Toggle.validate_toggle_attributes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/toggle.ex:29:13 #(RivaAshWeb.Components.Atoms.Toggle.validate_toggle_attributes)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash_web/components/atoms/all_atoms.ex:78:9 #(RivaAshWeb.Components.Atoms.AllAtoms.validate_opts!)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/validations.ex:437:16 #(RivaAsh.Validations)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item_position.ex:317:22 #(RivaAsh.Resources.ItemPosition)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/item.ex:256:25 #(RivaAsh.Resources.Item)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:465:11 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:461:28 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:443:11 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:438:28 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:315:28 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:309:28 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:290:30 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:271:28 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:263:30 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:239:28 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:227:30 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:203:30 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:195:28 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:164:28 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:156:13 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/resources/client.ex:151:30 #(RivaAsh.Resources.Client)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/reactors/reservation_reactor.ex:224:26 #(RivaAsh.Reactors.ReservationReactor)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/reactors/reservation_reactor.ex:149:18 #(RivaAsh.Reactors.ReservationReactor)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/reactors/reservation_reactor.ex:125:18 #(RivaAsh.Reactors.ReservationReactor)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/gdpr/retention_policy.ex:382:5 #(RivaAsh.GDPR.RetentionPolicy.count_consent_records)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/gdpr/retention_policy.ex:375:5 #(RivaAsh.GDPR.RetentionPolicy.count_archived_users)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/gdpr/retention_policy.ex:368:5 #(RivaAsh.GDPR.RetentionPolicy.count_active_users)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/database_health.ex:215:16 #(RivaAsh.DatabaseHealth.check_postgres_version)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       lib/riva_ash/database_health.ex:103:16 #(RivaAsh.DatabaseHealth.check_database_extensions)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/working_browser_test.exs:7:11 #(WorkingBrowserTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/property_based_browser_example_test.exs:397:79 #(RivaAshWeb.PropertyBasedBrowserExampleTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/property_based_browser_example_test.exs:205:15 #(RivaAshWeb.PropertyBasedBrowserExampleTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/property_based_browser_example_test.exs:201:31 #(RivaAshWeb.PropertyBasedBrowserExampleTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/property_based_browser_example_test.exs:197:34 #(RivaAshWeb.PropertyBasedBrowserExampleTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/property_based_browser_example_test.exs:91:15 #(RivaAshWeb.PropertyBasedBrowserExampleTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/live/reservation_live_test.exs:91:7 #(RivaAshWeb.ReservationLiveTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/live/reservation_center_live_test.exs:48:5 #(RivaAshWeb.ReservationCenterLiveTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/controllers/health_controller_test.exs:49:9 #(RivaAshWeb.HealthControllerTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/controllers/api/v1/items_controller_test.exs:234:20 #(RivaAshWeb.API.V1.ItemsControllerTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/controllers/api/v1/items_controller_test.exs:202:18 #(RivaAshWeb.API.V1.ItemsControllerTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/controllers/api/v1/items_controller_test.exs:93:9 #(RivaAshWeb.API.V1.ItemsControllerTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/authentication_flow_test.exs:286:9 #(RivaAshWeb.AuthenticationFlowTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/authentication_flow_test.exs:256:9 #(RivaAshWeb.AuthenticationFlowTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash_web/authentication_flow_test.exs:197:9 #(RivaAshWeb.AuthenticationFlowTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:124:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:123:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:112:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:97:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:78:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:64:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:63:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:62:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:58:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:57:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:56:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:45:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:44:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:43:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:31:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:30:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:29:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:16:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:15:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:14:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/validations_test.exs:13:23 #(RivaAsh.ValidationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/security_test.exs:262:20 #(RivaAsh.SecurityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/security_test.exs:192:20 #(RivaAsh.SecurityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/security_test.exs:182:20 #(RivaAsh.SecurityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/security_test.exs:100:20 #(RivaAsh.SecurityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/security_test.exs:93:20 #(RivaAsh.SecurityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/resources/client_test.exs:200:40 #(RivaAsh.Resources.ClientTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/resources/client_test.exs:197:24 #(RivaAsh.Resources.ClientTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/resources/client_test.exs:187:40 #(RivaAsh.Resources.ClientTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/resources/client_test.exs:184:24 #(RivaAsh.Resources.ClientTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/resources/client_test.exs:148:40 #(RivaAsh.Resources.ClientTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/resources/client_test.exs:145:24 #(RivaAsh.Resources.ClientTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/resources/client_test.exs:135:40 #(RivaAsh.Resources.ClientTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/resources/client_test.exs:132:24 #(RivaAsh.Resources.ClientTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/resources/client_test.exs:107:20 #(RivaAsh.Resources.ClientTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/release_test.exs:124:23 #(RivaAsh.ReleaseTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/release_test.exs:117:23 #(RivaAsh.ReleaseTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/release_test.exs:24:23 #(RivaAsh.ReleaseTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/recurring_reservations_test.exs:190:23 #(RivaAsh.RecurringReservationsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/permissions_test.exs:73:20 #(RivaAsh.PermissionsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/permissions_test.exs:71:20 #(RivaAsh.PermissionsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/permissions_test.exs:62:20 #(RivaAsh.PermissionsTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/mermaid_test.exs:141:23 #(RivaAsh.MermaidTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/mermaid_test.exs:129:23 #(RivaAsh.MermaidTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/mermaid_test.exs:115:23 #(RivaAsh.MermaidTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/changes_test.exs:137:23 #(RivaAsh.ChangesTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/booking_test.exs:171:23 #(RivaAsh.BookingTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:808:23 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:755:23 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:707:60 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:706:70 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:681:60 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:680:70 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:654:60 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:653:70 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:627:62 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:626:72 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:593:62 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:592:72 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:569:62 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:568:72 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:545:62 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:544:72 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:516:64 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:515:74 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:473:64 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:472:74 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:451:64 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:450:74 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:428:64 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:427:74 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:406:64 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:405:74 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:364:64 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:363:74 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:312:62 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:311:72 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:250:60 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:249:70 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:184:58 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:183:68 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:156:58 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:155:68 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:132:58 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:131:68 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:108:58 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:107:68 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:84:58 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_test.exs:83:68 #(RivaAsh.AvailabilityTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_property_test.exs:24:18 #(RivaAsh.AvailabilityPropertyTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/availability_property_test.exs:23:15 #(RivaAsh.AvailabilityPropertyTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/authorization_test.exs:77:20 #(RivaAsh.AuthorizationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/authorization_test.exs:75:20 #(RivaAsh.AuthorizationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/authorization_test.exs:66:20 #(RivaAsh.AuthorizationTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/accounts/rate_limiter_test.exs:43:7 #(RivaAsh.Accounts.RateLimiterTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/accounts/rate_limiter_test.exs:41:9 #(RivaAsh.Accounts.RateLimiterTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/accounts/rate_limiter_test.exs:31:7 #(RivaAsh.Accounts.RateLimiterTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/accounts/rate_limiter_test.exs:29:9 #(RivaAsh.Accounts.RateLimiterTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/riva_ash/accounts/rate_limiter_test.exs:19:9 #(RivaAsh.Accounts.RateLimiterTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/property_testing_system_test.exs:57:49 #(RivaAsh.PropertyTestingSystemTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/property_testing_simple_test.exs:77:93 #(PropertyTestingSimpleTest)
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/unit_test_helper.exs:157:3 #()
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/unit_test_helper.exs:148:7 #()
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/unit_test_helper.exs:37:5 #()
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/unit_test_helper.exs:23:9 #()
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/test_helper.exs:123:5 #()
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       test/test_helper.exs:47:7 #()
┃ [C] ↗ Unused variables should be named consistently. It seems your strategy is to give them meaningful names (eg. `_foo`) but `_` does not follow that convention.
┃       config/runtime.exs:47:7 #()

Please report incorrect results: https://github.com/rrrene/credo/issues

Analysis took 5.0 seconds (0.5s to load, 4.5s running 72 checks on 352 files)
4926 mods/funs, found 1014 consistency issues, 35 warnings, 519 refactoring opportunities, 302 code readability issues, 589 software design suggestions.

Use `mix credo explain` to explain issues, `mix credo --help` for options.
